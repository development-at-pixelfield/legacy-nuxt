{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "addConstantOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dayPriceChange",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "addTimedOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "constantOffers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "constantPurchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "deleteConstantOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "deleteTimedOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTimedOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTimedPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "offsetSeconds",
          "type": "int256"
        },
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "offsetTimedOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "timedOffers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dayPriceChange",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "timedPurchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradeOwner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "/root/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/token/ERC721/ERC721.sol",
    "11": "/root/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/Strings.sol",
    "12": "/root/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/introspection/ERC165.sol",
    "13": "/root/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/introspection/IERC165.sol",
    "14": "/root/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/math/Math.sol",
    "15": "/root/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/math/SafeMath.sol",
    "17": "contracts/NftTrader.sol",
    "2": "/root/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/token/ERC721/IERC721.sol",
    "3": "/root/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/token/ERC721/IERC721Receiver.sol",
    "7": "/root/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/token/ERC721/extensions/IERC721Metadata.sol",
    "8": "/root/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/Address.sol",
    "9": "/root/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/Context.sol"
  },
  "ast": {
    "absolutePath": "contracts/NftTrader.sol",
    "exportedSymbols": {
      "Address": [
        3093
      ],
      "Context": [
        2635
      ],
      "ERC165": [
        3320
      ],
      "ERC721": [
        1673
      ],
      "IERC165": [
        3363
      ],
      "IERC721": [
        2751
      ],
      "IERC721Metadata": [
        2796
      ],
      "IERC721Receiver": [
        2769
      ],
      "Math": [
        2301
      ],
      "NftTrader": [
        737
      ],
      "SafeMath": [
        2613
      ],
      "Strings": [
        3296
      ]
    },
    "id": 738,
    "license": "UNLICENSED",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 208,
        "literals": [
          "solidity",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "39:22:17"
      },
      {
        "absolutePath": "/root/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/token/ERC721/ERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/ERC721.sol",
        "id": 209,
        "nodeType": "ImportDirective",
        "scope": 738,
        "sourceUnit": 1674,
        "src": "63:57:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/root/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/math/SafeMath.sol",
        "file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
        "id": 210,
        "nodeType": "ImportDirective",
        "scope": 738,
        "sourceUnit": 2614,
        "src": "121:57:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/root/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.4.0/contracts/utils/math/Math.sol",
        "file": "@openzeppelin/contracts/utils/math/Math.sol",
        "id": 211,
        "nodeType": "ImportDirective",
        "scope": 738,
        "sourceUnit": 2302,
        "src": "179:53:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 737,
        "linearizedBaseContracts": [
          737
        ],
        "name": "NftTrader",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "d423bf12",
            "id": 218,
            "mutability": "mutable",
            "name": "timedOffers",
            "nodeType": "VariableDeclaration",
            "scope": 737,
            "src": "339:69:17",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_TimedOffer_$238_storage_$_$",
              "typeString": "mapping(address => mapping(uint256 => struct NftTrader.TimedOffer))"
            },
            "typeName": {
              "id": 217,
              "keyType": {
                "id": 212,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "347:7:17",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "339:50:17",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_TimedOffer_$238_storage_$_$",
                "typeString": "mapping(address => mapping(uint256 => struct NftTrader.TimedOffer))"
              },
              "valueType": {
                "id": 216,
                "keyType": {
                  "id": 213,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "366:7:17",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "Mapping",
                "src": "358:30:17",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TimedOffer_$238_storage_$",
                  "typeString": "mapping(uint256 => struct NftTrader.TimedOffer)"
                },
                "valueType": {
                  "id": 215,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 214,
                    "name": "TimedOffer",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 238,
                    "src": "377:10:17"
                  },
                  "referencedDeclaration": 238,
                  "src": "377:10:17",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_TimedOffer_$238_storage_ptr",
                    "typeString": "struct NftTrader.TimedOffer"
                  }
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "6ff45c35",
            "id": 225,
            "mutability": "mutable",
            "name": "constantOffers",
            "nodeType": "VariableDeclaration",
            "scope": 737,
            "src": "414:75:17",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_ConstantOffer_$243_storage_$_$",
              "typeString": "mapping(address => mapping(uint256 => struct NftTrader.ConstantOffer))"
            },
            "typeName": {
              "id": 224,
              "keyType": {
                "id": 219,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "422:7:17",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "414:53:17",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_ConstantOffer_$243_storage_$_$",
                "typeString": "mapping(address => mapping(uint256 => struct NftTrader.ConstantOffer))"
              },
              "valueType": {
                "id": 223,
                "keyType": {
                  "id": 220,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "441:7:17",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "Mapping",
                "src": "433:33:17",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ConstantOffer_$243_storage_$",
                  "typeString": "mapping(uint256 => struct NftTrader.ConstantOffer)"
                },
                "valueType": {
                  "id": 222,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 221,
                    "name": "ConstantOffer",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 243,
                    "src": "452:13:17"
                  },
                  "referencedDeclaration": 243,
                  "src": "452:13:17",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ConstantOffer_$243_storage_ptr",
                    "typeString": "struct NftTrader.ConstantOffer"
                  }
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "e2ab75ef",
            "id": 227,
            "mutability": "mutable",
            "name": "tradeOwner",
            "nodeType": "VariableDeclaration",
            "scope": 737,
            "src": "495:33:17",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 226,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "495:15:17",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "public"
          },
          {
            "canonicalName": "NftTrader.TimedOffer",
            "id": 238,
            "members": [
              {
                "constant": false,
                "id": 229,
                "mutability": "mutable",
                "name": "createdAt",
                "nodeType": "VariableDeclaration",
                "scope": 238,
                "src": "563:17:17",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 228,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "563:7:17",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 231,
                "mutability": "mutable",
                "name": "dayPriceChange",
                "nodeType": "VariableDeclaration",
                "scope": 238,
                "src": "590:22:17",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 230,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "590:7:17",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 233,
                "mutability": "mutable",
                "name": "minPrice",
                "nodeType": "VariableDeclaration",
                "scope": 238,
                "src": "622:16:17",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 232,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "622:7:17",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 235,
                "mutability": "mutable",
                "name": "maxPrice",
                "nodeType": "VariableDeclaration",
                "scope": 238,
                "src": "648:16:17",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 234,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "648:7:17",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 237,
                "mutability": "mutable",
                "name": "isSet",
                "nodeType": "VariableDeclaration",
                "scope": 238,
                "src": "674:10:17",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 236,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "674:4:17",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "TimedOffer",
            "nodeType": "StructDefinition",
            "scope": 737,
            "src": "535:156:17",
            "visibility": "public"
          },
          {
            "canonicalName": "NftTrader.ConstantOffer",
            "id": 243,
            "members": [
              {
                "constant": false,
                "id": 240,
                "mutability": "mutable",
                "name": "price",
                "nodeType": "VariableDeclaration",
                "scope": 243,
                "src": "728:13:17",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 239,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "728:7:17",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 242,
                "mutability": "mutable",
                "name": "isSet",
                "nodeType": "VariableDeclaration",
                "scope": 243,
                "src": "751:10:17",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 241,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "751:4:17",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "ConstantOffer",
            "nodeType": "StructDefinition",
            "scope": 737,
            "src": "697:71:17",
            "visibility": "public"
          },
          {
            "body": {
              "id": 254,
              "nodeType": "Block",
              "src": "797:49:17",
              "statements": [
                {
                  "expression": {
                    "id": 252,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 246,
                      "name": "tradeOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 227,
                      "src": "807:10:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 249,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "828:3:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 250,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "828:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 248,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "820:8:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_payable_$",
                          "typeString": "type(address payable)"
                        },
                        "typeName": {
                          "id": 247,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "820:8:17",
                          "stateMutability": "payable",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 251,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "820:19:17",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "807:32:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 253,
                  "nodeType": "ExpressionStatement",
                  "src": "807:32:17"
                }
              ]
            },
            "id": 255,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 244,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "786:2:17"
            },
            "returnParameters": {
              "id": 245,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "797:0:17"
            },
            "scope": 737,
            "src": "774:72:17",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 272,
              "nodeType": "Block",
              "src": "903:119:17",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 264,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 261,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "921:3:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 262,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "921:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 263,
                          "name": "tradeOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 227,
                          "src": "935:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "921:24:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4973206e6f74206f776e6572206f662074686520747261646520636f6e7472616374",
                        "id": 265,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "947:36:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b1597cd1c00faa9cd3fdb9e70c99fa296526cac64d89ac7e50355441084c76c5",
                          "typeString": "literal_string \"Is not owner of the trade contract\""
                        },
                        "value": "Is not owner of the trade contract"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b1597cd1c00faa9cd3fdb9e70c99fa296526cac64d89ac7e50355441084c76c5",
                          "typeString": "literal_string \"Is not owner of the trade contract\""
                        }
                      ],
                      "id": 260,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "913:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 266,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "913:71:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 267,
                  "nodeType": "ExpressionStatement",
                  "src": "913:71:17"
                },
                {
                  "expression": {
                    "id": 270,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 268,
                      "name": "tradeOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 227,
                      "src": "994:10:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 269,
                      "name": "newOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 257,
                      "src": "1007:8:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "994:21:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 271,
                  "nodeType": "ExpressionStatement",
                  "src": "994:21:17"
                }
              ]
            },
            "functionSelector": "13af4035",
            "id": 273,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setOwner",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 258,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 257,
                  "mutability": "mutable",
                  "name": "newOwner",
                  "nodeType": "VariableDeclaration",
                  "scope": 273,
                  "src": "870:24:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 256,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "870:15:17",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "869:26:17"
            },
            "returnParameters": {
              "id": 259,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "903:0:17"
            },
            "scope": 737,
            "src": "852:170:17",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 326,
              "nodeType": "Block",
              "src": "1203:408:17",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 290,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 287,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1221:3:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 288,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1221:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 289,
                          "name": "tradeOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 227,
                          "src": "1235:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "1221:24:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4973206e6f74206f776e6572206f662074686520747261646520636f6e7472616374",
                        "id": 291,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1247:36:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b1597cd1c00faa9cd3fdb9e70c99fa296526cac64d89ac7e50355441084c76c5",
                          "typeString": "literal_string \"Is not owner of the trade contract\""
                        },
                        "value": "Is not owner of the trade contract"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b1597cd1c00faa9cd3fdb9e70c99fa296526cac64d89ac7e50355441084c76c5",
                          "typeString": "literal_string \"Is not owner of the trade contract\""
                        }
                      ],
                      "id": 286,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1213:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 292,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1213:71:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 293,
                  "nodeType": "ExpressionStatement",
                  "src": "1213:71:17"
                },
                {
                  "assignments": [
                    296
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 296,
                      "mutability": "mutable",
                      "name": "token",
                      "nodeType": "VariableDeclaration",
                      "scope": 326,
                      "src": "1295:12:17",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC721_$1673",
                        "typeString": "contract ERC721"
                      },
                      "typeName": {
                        "id": 295,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 294,
                          "name": "ERC721",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1673,
                          "src": "1295:6:17"
                        },
                        "referencedDeclaration": 1673,
                        "src": "1295:6:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC721_$1673",
                          "typeString": "contract ERC721"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 300,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 298,
                        "name": "contractAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 281,
                        "src": "1317:12:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 297,
                      "name": "ERC721",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1673,
                      "src": "1310:6:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_ERC721_$1673_$",
                        "typeString": "type(contract ERC721)"
                      }
                    },
                    "id": 299,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1310:20:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC721_$1673",
                      "typeString": "contract ERC721"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1295:35:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 307,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 304,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 283,
                              "src": "1362:7:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 302,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 296,
                              "src": "1348:5:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC721_$1673",
                                "typeString": "contract ERC721"
                              }
                            },
                            "id": 303,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "ownerOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 988,
                            "src": "1348:13:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view external returns (address)"
                            }
                          },
                          "id": 305,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1348:22:17",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 306,
                          "name": "tradeOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 227,
                          "src": "1374:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "1348:36:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4973206e6f74206f776e6572206f662045524337323120746f6b656e",
                        "id": 308,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1386:30:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_def1d321e6d440d01a2e2ff2df14bdd47cbc373288cd08d9138a62d56fc03687",
                          "typeString": "literal_string \"Is not owner of ERC721 token\""
                        },
                        "value": "Is not owner of ERC721 token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_def1d321e6d440d01a2e2ff2df14bdd47cbc373288cd08d9138a62d56fc03687",
                          "typeString": "literal_string \"Is not owner of ERC721 token\""
                        }
                      ],
                      "id": 301,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1340:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 309,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1340:77:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 310,
                  "nodeType": "ExpressionStatement",
                  "src": "1340:77:17"
                },
                {
                  "expression": {
                    "id": 324,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 311,
                          "name": "timedOffers",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 218,
                          "src": "1428:11:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_TimedOffer_$238_storage_$_$",
                            "typeString": "mapping(address => mapping(uint256 => struct NftTrader.TimedOffer storage ref))"
                          }
                        },
                        "id": 314,
                        "indexExpression": {
                          "id": 312,
                          "name": "contractAddr",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 281,
                          "src": "1440:12:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1428:25:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TimedOffer_$238_storage_$",
                          "typeString": "mapping(uint256 => struct NftTrader.TimedOffer storage ref)"
                        }
                      },
                      "id": 315,
                      "indexExpression": {
                        "id": 313,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 283,
                        "src": "1454:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1428:34:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TimedOffer_$238_storage",
                        "typeString": "struct NftTrader.TimedOffer storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 317,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "1489:5:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 318,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "1489:15:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 319,
                          "name": "dayPriceChange",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 275,
                          "src": "1518:14:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 320,
                          "name": "minPrice",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 277,
                          "src": "1546:8:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 321,
                          "name": "maxPrice",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 279,
                          "src": "1568:8:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "hexValue": "74727565",
                          "id": 322,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1590:4:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        ],
                        "id": 316,
                        "name": "TimedOffer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 238,
                        "src": "1465:10:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_TimedOffer_$238_storage_ptr_$",
                          "typeString": "type(struct NftTrader.TimedOffer storage pointer)"
                        }
                      },
                      "id": 323,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1465:139:17",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TimedOffer_$238_memory_ptr",
                        "typeString": "struct NftTrader.TimedOffer memory"
                      }
                    },
                    "src": "1428:176:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TimedOffer_$238_storage",
                      "typeString": "struct NftTrader.TimedOffer storage ref"
                    }
                  },
                  "id": 325,
                  "nodeType": "ExpressionStatement",
                  "src": "1428:176:17"
                }
              ]
            },
            "functionSelector": "e8bef82d",
            "id": 327,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addTimedOffer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 284,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 275,
                  "mutability": "mutable",
                  "name": "dayPriceChange",
                  "nodeType": "VariableDeclaration",
                  "scope": 327,
                  "src": "1060:22:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 274,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1060:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 277,
                  "mutability": "mutable",
                  "name": "minPrice",
                  "nodeType": "VariableDeclaration",
                  "scope": 327,
                  "src": "1092:16:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 276,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1092:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 279,
                  "mutability": "mutable",
                  "name": "maxPrice",
                  "nodeType": "VariableDeclaration",
                  "scope": 327,
                  "src": "1118:16:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 278,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1118:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 281,
                  "mutability": "mutable",
                  "name": "contractAddr",
                  "nodeType": "VariableDeclaration",
                  "scope": 327,
                  "src": "1144:20:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 280,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1144:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 283,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 327,
                  "src": "1174:15:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 282,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1174:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1050:145:17"
            },
            "returnParameters": {
              "id": 285,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1203:0:17"
            },
            "scope": 737,
            "src": "1028:583:17",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 368,
              "nodeType": "Block",
              "src": "1741:261:17",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 340,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 337,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1759:3:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 338,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1759:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 339,
                          "name": "tradeOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 227,
                          "src": "1773:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "1759:24:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4973206e6f74206f776e6572206f662074686520747261646520636f6e7472616374",
                        "id": 341,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1785:36:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b1597cd1c00faa9cd3fdb9e70c99fa296526cac64d89ac7e50355441084c76c5",
                          "typeString": "literal_string \"Is not owner of the trade contract\""
                        },
                        "value": "Is not owner of the trade contract"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b1597cd1c00faa9cd3fdb9e70c99fa296526cac64d89ac7e50355441084c76c5",
                          "typeString": "literal_string \"Is not owner of the trade contract\""
                        }
                      ],
                      "id": 336,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1751:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 342,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1751:71:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 343,
                  "nodeType": "ExpressionStatement",
                  "src": "1751:71:17"
                },
                {
                  "assignments": [
                    346
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 346,
                      "mutability": "mutable",
                      "name": "offer",
                      "nodeType": "VariableDeclaration",
                      "scope": 368,
                      "src": "1833:24:17",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TimedOffer_$238_storage_ptr",
                        "typeString": "struct NftTrader.TimedOffer"
                      },
                      "typeName": {
                        "id": 345,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 344,
                          "name": "TimedOffer",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 238,
                          "src": "1833:10:17"
                        },
                        "referencedDeclaration": 238,
                        "src": "1833:10:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TimedOffer_$238_storage_ptr",
                          "typeString": "struct NftTrader.TimedOffer"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 352,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 347,
                        "name": "timedOffers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 218,
                        "src": "1860:11:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_TimedOffer_$238_storage_$_$",
                          "typeString": "mapping(address => mapping(uint256 => struct NftTrader.TimedOffer storage ref))"
                        }
                      },
                      "id": 349,
                      "indexExpression": {
                        "id": 348,
                        "name": "contractAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 331,
                        "src": "1872:12:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "1860:25:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TimedOffer_$238_storage_$",
                        "typeString": "mapping(uint256 => struct NftTrader.TimedOffer storage ref)"
                      }
                    },
                    "id": 351,
                    "indexExpression": {
                      "id": 350,
                      "name": "tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 333,
                      "src": "1886:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1860:34:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TimedOffer_$238_storage",
                      "typeString": "struct NftTrader.TimedOffer storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1833:61:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 354,
                          "name": "offer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 346,
                          "src": "1912:5:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TimedOffer_$238_storage_ptr",
                            "typeString": "struct NftTrader.TimedOffer storage pointer"
                          }
                        },
                        "id": 355,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "isSet",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 237,
                        "src": "1912:11:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f66666572206e6f7420666f756e64",
                        "id": 356,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1925:17:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_35be6e644a93fcba8894b7c266547cb081c5c0c2d487582e197d4427247e6dd7",
                          "typeString": "literal_string \"Offer not found\""
                        },
                        "value": "Offer not found"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_35be6e644a93fcba8894b7c266547cb081c5c0c2d487582e197d4427247e6dd7",
                          "typeString": "literal_string \"Offer not found\""
                        }
                      ],
                      "id": 353,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1904:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 357,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1904:39:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 358,
                  "nodeType": "ExpressionStatement",
                  "src": "1904:39:17"
                },
                {
                  "expression": {
                    "id": 366,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 359,
                        "name": "offer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 346,
                        "src": "1954:5:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TimedOffer_$238_storage_ptr",
                          "typeString": "struct NftTrader.TimedOffer storage pointer"
                        }
                      },
                      "id": 361,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "createdAt",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 229,
                      "src": "1954:15:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 364,
                          "name": "offsetSeconds",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 329,
                          "src": "1981:13:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        ],
                        "id": 363,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "1973:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_uint256_$",
                          "typeString": "type(uint256)"
                        },
                        "typeName": {
                          "id": 362,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1973:7:17",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 365,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1973:22:17",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1954:41:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 367,
                  "nodeType": "ExpressionStatement",
                  "src": "1954:41:17"
                }
              ]
            },
            "functionSelector": "631c8a24",
            "id": 369,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "offsetTimedOffer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 334,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 329,
                  "mutability": "mutable",
                  "name": "offsetSeconds",
                  "nodeType": "VariableDeclaration",
                  "scope": 369,
                  "src": "1652:20:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  },
                  "typeName": {
                    "id": 328,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1652:6:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 331,
                  "mutability": "mutable",
                  "name": "contractAddr",
                  "nodeType": "VariableDeclaration",
                  "scope": 369,
                  "src": "1682:20:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 330,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1682:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 333,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 369,
                  "src": "1712:15:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 332,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1712:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1642:91:17"
            },
            "returnParameters": {
              "id": 335,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1741:0:17"
            },
            "scope": 737,
            "src": "1617:385:17",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 391,
              "nodeType": "Block",
              "src": "2080:139:17",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 380,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 377,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2098:3:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 378,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "2098:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 379,
                          "name": "tradeOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 227,
                          "src": "2112:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "2098:24:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4973206e6f74206f776e6572206f662074686520747261646520636f6e7472616374",
                        "id": 381,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2124:36:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b1597cd1c00faa9cd3fdb9e70c99fa296526cac64d89ac7e50355441084c76c5",
                          "typeString": "literal_string \"Is not owner of the trade contract\""
                        },
                        "value": "Is not owner of the trade contract"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b1597cd1c00faa9cd3fdb9e70c99fa296526cac64d89ac7e50355441084c76c5",
                          "typeString": "literal_string \"Is not owner of the trade contract\""
                        }
                      ],
                      "id": 376,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2090:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 382,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2090:71:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 383,
                  "nodeType": "ExpressionStatement",
                  "src": "2090:71:17"
                },
                {
                  "expression": {
                    "id": 389,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "2171:41:17",
                    "subExpression": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 384,
                          "name": "timedOffers",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 218,
                          "src": "2178:11:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_TimedOffer_$238_storage_$_$",
                            "typeString": "mapping(address => mapping(uint256 => struct NftTrader.TimedOffer storage ref))"
                          }
                        },
                        "id": 386,
                        "indexExpression": {
                          "id": 385,
                          "name": "contractAddr",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 371,
                          "src": "2190:12:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2178:25:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TimedOffer_$238_storage_$",
                          "typeString": "mapping(uint256 => struct NftTrader.TimedOffer storage ref)"
                        }
                      },
                      "id": 388,
                      "indexExpression": {
                        "id": 387,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 373,
                        "src": "2204:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2178:34:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TimedOffer_$238_storage",
                        "typeString": "struct NftTrader.TimedOffer storage ref"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 390,
                  "nodeType": "ExpressionStatement",
                  "src": "2171:41:17"
                }
              ]
            },
            "functionSelector": "2e94ca2a",
            "id": 392,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deleteTimedOffer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 374,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 371,
                  "mutability": "mutable",
                  "name": "contractAddr",
                  "nodeType": "VariableDeclaration",
                  "scope": 392,
                  "src": "2034:20:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 370,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2034:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 373,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 392,
                  "src": "2056:15:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 372,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2056:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2033:39:17"
            },
            "returnParameters": {
              "id": 375,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2080:0:17"
            },
            "scope": 737,
            "src": "2008:211:17",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 448,
              "nodeType": "Block",
              "src": "2302:383:17",
              "statements": [
                {
                  "assignments": [
                    401
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 401,
                      "mutability": "mutable",
                      "name": "offer",
                      "nodeType": "VariableDeclaration",
                      "scope": 448,
                      "src": "2312:23:17",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TimedOffer_$238_memory_ptr",
                        "typeString": "struct NftTrader.TimedOffer"
                      },
                      "typeName": {
                        "id": 400,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 399,
                          "name": "TimedOffer",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 238,
                          "src": "2312:10:17"
                        },
                        "referencedDeclaration": 238,
                        "src": "2312:10:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TimedOffer_$238_storage_ptr",
                          "typeString": "struct NftTrader.TimedOffer"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 407,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 402,
                        "name": "timedOffers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 218,
                        "src": "2338:11:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_TimedOffer_$238_storage_$_$",
                          "typeString": "mapping(address => mapping(uint256 => struct NftTrader.TimedOffer storage ref))"
                        }
                      },
                      "id": 404,
                      "indexExpression": {
                        "id": 403,
                        "name": "contractAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 394,
                        "src": "2350:12:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2338:25:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TimedOffer_$238_storage_$",
                        "typeString": "mapping(uint256 => struct NftTrader.TimedOffer storage ref)"
                      }
                    },
                    "id": 406,
                    "indexExpression": {
                      "id": 405,
                      "name": "tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 396,
                      "src": "2364:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2338:34:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TimedOffer_$238_storage",
                      "typeString": "struct NftTrader.TimedOffer storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2312:60:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 409,
                          "name": "offer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 401,
                          "src": "2390:5:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TimedOffer_$238_memory_ptr",
                            "typeString": "struct NftTrader.TimedOffer memory"
                          }
                        },
                        "id": 410,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "isSet",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 237,
                        "src": "2390:11:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f66666572206e6f7420666f756e64",
                        "id": 411,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2403:17:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_35be6e644a93fcba8894b7c266547cb081c5c0c2d487582e197d4427247e6dd7",
                          "typeString": "literal_string \"Offer not found\""
                        },
                        "value": "Offer not found"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_35be6e644a93fcba8894b7c266547cb081c5c0c2d487582e197d4427247e6dd7",
                          "typeString": "literal_string \"Offer not found\""
                        }
                      ],
                      "id": 408,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2382:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 412,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2382:39:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 413,
                  "nodeType": "ExpressionStatement",
                  "src": "2382:39:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 421,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 415,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2439:3:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 416,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "2439:9:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 418,
                              "name": "contractAddr",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 394,
                              "src": "2466:12:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 419,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 396,
                              "src": "2480:7:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 417,
                            "name": "getTimedPrice",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 516,
                            "src": "2452:13:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (address,uint256) view returns (uint256)"
                            }
                          },
                          "id": 420,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2452:36:17",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2439:49:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e73756666696369656e742066756e64732073656e74",
                        "id": 422,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2490:25:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ef04984094766165d0f3292abebb7fe2c98e15506095c629b0da789b5dea64bb",
                          "typeString": "literal_string \"Insufficient funds sent\""
                        },
                        "value": "Insufficient funds sent"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ef04984094766165d0f3292abebb7fe2c98e15506095c629b0da789b5dea64bb",
                          "typeString": "literal_string \"Insufficient funds sent\""
                        }
                      ],
                      "id": 414,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2431:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 423,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2431:85:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 424,
                  "nodeType": "ExpressionStatement",
                  "src": "2431:85:17"
                },
                {
                  "assignments": [
                    427
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 427,
                      "mutability": "mutable",
                      "name": "token",
                      "nodeType": "VariableDeclaration",
                      "scope": 448,
                      "src": "2527:12:17",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC721_$1673",
                        "typeString": "contract ERC721"
                      },
                      "typeName": {
                        "id": 426,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 425,
                          "name": "ERC721",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1673,
                          "src": "2527:6:17"
                        },
                        "referencedDeclaration": 1673,
                        "src": "2527:6:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC721_$1673",
                          "typeString": "contract ERC721"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 431,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 429,
                        "name": "contractAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 394,
                        "src": "2549:12:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 428,
                      "name": "ERC721",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1673,
                      "src": "2542:6:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_ERC721_$1673_$",
                        "typeString": "type(contract ERC721)"
                      }
                    },
                    "id": 430,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2542:20:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC721_$1673",
                      "typeString": "contract ERC721"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2527:35:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 435,
                        "name": "tradeOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 227,
                        "src": "2595:10:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "expression": {
                          "id": 436,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2607:3:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 437,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2607:10:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 438,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 396,
                        "src": "2619:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 432,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 427,
                        "src": "2572:5:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC721_$1673",
                          "typeString": "contract ERC721"
                        }
                      },
                      "id": 434,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1204,
                      "src": "2572:22:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256) external"
                      }
                    },
                    "id": 439,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2572:55:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 440,
                  "nodeType": "ExpressionStatement",
                  "src": "2572:55:17"
                },
                {
                  "expression": {
                    "id": 446,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "2637:41:17",
                    "subExpression": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 441,
                          "name": "timedOffers",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 218,
                          "src": "2644:11:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_TimedOffer_$238_storage_$_$",
                            "typeString": "mapping(address => mapping(uint256 => struct NftTrader.TimedOffer storage ref))"
                          }
                        },
                        "id": 443,
                        "indexExpression": {
                          "id": 442,
                          "name": "contractAddr",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 394,
                          "src": "2656:12:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2644:25:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TimedOffer_$238_storage_$",
                          "typeString": "mapping(uint256 => struct NftTrader.TimedOffer storage ref)"
                        }
                      },
                      "id": 445,
                      "indexExpression": {
                        "id": 444,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 396,
                        "src": "2670:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2644:34:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TimedOffer_$238_storage",
                        "typeString": "struct NftTrader.TimedOffer storage ref"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 447,
                  "nodeType": "ExpressionStatement",
                  "src": "2637:41:17"
                }
              ]
            },
            "functionSelector": "f3ed1a99",
            "id": 449,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "timedPurchase",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 397,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 394,
                  "mutability": "mutable",
                  "name": "contractAddr",
                  "nodeType": "VariableDeclaration",
                  "scope": 449,
                  "src": "2248:20:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 393,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2248:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 396,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 449,
                  "src": "2270:15:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 395,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2270:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2247:39:17"
            },
            "returnParameters": {
              "id": 398,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2302:0:17"
            },
            "scope": 737,
            "src": "2225:460:17",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 515,
              "nodeType": "Block",
              "src": "2809:521:17",
              "statements": [
                {
                  "assignments": [
                    460
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 460,
                      "mutability": "mutable",
                      "name": "offer",
                      "nodeType": "VariableDeclaration",
                      "scope": 515,
                      "src": "2819:23:17",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TimedOffer_$238_memory_ptr",
                        "typeString": "struct NftTrader.TimedOffer"
                      },
                      "typeName": {
                        "id": 459,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 458,
                          "name": "TimedOffer",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 238,
                          "src": "2819:10:17"
                        },
                        "referencedDeclaration": 238,
                        "src": "2819:10:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TimedOffer_$238_storage_ptr",
                          "typeString": "struct NftTrader.TimedOffer"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 466,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 461,
                        "name": "timedOffers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 218,
                        "src": "2845:11:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_TimedOffer_$238_storage_$_$",
                          "typeString": "mapping(address => mapping(uint256 => struct NftTrader.TimedOffer storage ref))"
                        }
                      },
                      "id": 463,
                      "indexExpression": {
                        "id": 462,
                        "name": "contractAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 451,
                        "src": "2857:12:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2845:25:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TimedOffer_$238_storage_$",
                        "typeString": "mapping(uint256 => struct NftTrader.TimedOffer storage ref)"
                      }
                    },
                    "id": 465,
                    "indexExpression": {
                      "id": 464,
                      "name": "tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 453,
                      "src": "2871:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2845:34:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TimedOffer_$238_storage",
                      "typeString": "struct NftTrader.TimedOffer storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2819:60:17"
                },
                {
                  "condition": {
                    "expression": {
                      "id": 467,
                      "name": "offer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 460,
                      "src": "2893:5:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TimedOffer_$238_memory_ptr",
                        "typeString": "struct NftTrader.TimedOffer memory"
                      }
                    },
                    "id": 468,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "isSet",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 237,
                    "src": "2893:11:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 513,
                    "nodeType": "Block",
                    "src": "3283:41:17",
                    "statements": [
                      {
                        "expression": {
                          "id": 511,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 509,
                            "name": "currentPrice",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 456,
                            "src": "3297:12:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "30",
                            "id": 510,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3312:1:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3297:16:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 512,
                        "nodeType": "ExpressionStatement",
                        "src": "3297:16:17"
                      }
                    ]
                  },
                  "id": 514,
                  "nodeType": "IfStatement",
                  "src": "2889:435:17",
                  "trueBody": {
                    "id": 508,
                    "nodeType": "Block",
                    "src": "2906:363:17",
                    "statements": [
                      {
                        "assignments": [
                          470
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 470,
                            "mutability": "mutable",
                            "name": "daysPassed",
                            "nodeType": "VariableDeclaration",
                            "scope": 508,
                            "src": "2920:18:17",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 469,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2920:7:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 484,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 475,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -4,
                                    "src": "2984:5:17",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 476,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "timestamp",
                                  "nodeType": "MemberAccess",
                                  "src": "2984:15:17",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "expression": {
                                    "id": 477,
                                    "name": "offer",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 460,
                                    "src": "3001:5:17",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_TimedOffer_$238_memory_ptr",
                                      "typeString": "struct NftTrader.TimedOffer memory"
                                    }
                                  },
                                  "id": 478,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "createdAt",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 229,
                                  "src": "3001:15:17",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 473,
                                  "name": "SafeMath",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2613,
                                  "src": "2971:8:17",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_SafeMath_$2613_$",
                                    "typeString": "type(library SafeMath)"
                                  }
                                },
                                "id": 474,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sub",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 2492,
                                "src": "2971:12:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 479,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2971:46:17",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "commonType": {
                                "typeIdentifier": "t_rational_86400_by_1",
                                "typeString": "int_const 86400"
                              },
                              "id": 482,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "hexValue": "33363030",
                                "id": 480,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3019:4:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_3600_by_1",
                                  "typeString": "int_const 3600"
                                },
                                "value": "3600"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "*",
                              "rightExpression": {
                                "hexValue": "3234",
                                "id": 481,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3026:2:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_24_by_1",
                                  "typeString": "int_const 24"
                                },
                                "value": "24"
                              },
                              "src": "3019:9:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_86400_by_1",
                                "typeString": "int_const 86400"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_rational_86400_by_1",
                                "typeString": "int_const 86400"
                              }
                            ],
                            "expression": {
                              "id": 471,
                              "name": "SafeMath",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2613,
                              "src": "2941:8:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_SafeMath_$2613_$",
                                "typeString": "type(library SafeMath)"
                              }
                            },
                            "id": 472,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "div",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2522,
                            "src": "2941:12:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 483,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2941:101:17",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2920:122:17"
                      },
                      {
                        "assignments": [
                          486
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 486,
                            "mutability": "mutable",
                            "name": "calculatedPrice",
                            "nodeType": "VariableDeclaration",
                            "scope": 508,
                            "src": "3056:23:17",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 485,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3056:7:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 498,
                        "initialValue": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 489,
                                "name": "offer",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 460,
                                "src": "3112:5:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_TimedOffer_$238_memory_ptr",
                                  "typeString": "struct NftTrader.TimedOffer memory"
                                }
                              },
                              "id": 490,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "maxPrice",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 235,
                              "src": "3112:14:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 493,
                                  "name": "daysPassed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 470,
                                  "src": "3141:10:17",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "expression": {
                                    "id": 494,
                                    "name": "offer",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 460,
                                    "src": "3153:5:17",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_TimedOffer_$238_memory_ptr",
                                      "typeString": "struct NftTrader.TimedOffer memory"
                                    }
                                  },
                                  "id": 495,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "dayPriceChange",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 231,
                                  "src": "3153:20:17",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 491,
                                  "name": "SafeMath",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2613,
                                  "src": "3128:8:17",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_SafeMath_$2613_$",
                                    "typeString": "type(library SafeMath)"
                                  }
                                },
                                "id": 492,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "mul",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 2507,
                                "src": "3128:12:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 496,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3128:46:17",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 487,
                              "name": "SafeMath",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2613,
                              "src": "3082:8:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_SafeMath_$2613_$",
                                "typeString": "type(library SafeMath)"
                              }
                            },
                            "id": 488,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2492,
                            "src": "3082:12:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 497,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3082:106:17",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3056:132:17"
                      },
                      {
                        "expression": {
                          "id": 506,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 499,
                            "name": "currentPrice",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 456,
                            "src": "3202:12:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 502,
                                  "name": "offer",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 460,
                                  "src": "3226:5:17",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_TimedOffer_$238_memory_ptr",
                                    "typeString": "struct NftTrader.TimedOffer memory"
                                  }
                                },
                                "id": 503,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "minPrice",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 233,
                                "src": "3226:14:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 504,
                                "name": "calculatedPrice",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 486,
                                "src": "3242:15:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 500,
                                "name": "Math",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2301,
                                "src": "3217:4:17",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_Math_$2301_$",
                                  "typeString": "type(library Math)"
                                }
                              },
                              "id": 501,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "max",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 2234,
                              "src": "3217:8:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 505,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3217:41:17",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3202:56:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 507,
                        "nodeType": "ExpressionStatement",
                        "src": "3202:56:17"
                      }
                    ]
                  }
                }
              ]
            },
            "functionSelector": "76fc2459",
            "id": 516,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTimedPrice",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 454,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 451,
                  "mutability": "mutable",
                  "name": "contractAddr",
                  "nodeType": "VariableDeclaration",
                  "scope": 516,
                  "src": "2714:20:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 450,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2714:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 453,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 516,
                  "src": "2736:15:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 452,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2736:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2713:39:17"
            },
            "returnParameters": {
              "id": 457,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 456,
                  "mutability": "mutable",
                  "name": "currentPrice",
                  "nodeType": "VariableDeclaration",
                  "scope": 516,
                  "src": "2783:20:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 455,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2783:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2773:36:17"
            },
            "scope": 737,
            "src": "2691:639:17",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 555,
              "nodeType": "Block",
              "src": "3501:202:17",
              "statements": [
                {
                  "assignments": [
                    531
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 531,
                      "mutability": "mutable",
                      "name": "offer",
                      "nodeType": "VariableDeclaration",
                      "scope": 555,
                      "src": "3511:23:17",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TimedOffer_$238_memory_ptr",
                        "typeString": "struct NftTrader.TimedOffer"
                      },
                      "typeName": {
                        "id": 530,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 529,
                          "name": "TimedOffer",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 238,
                          "src": "3511:10:17"
                        },
                        "referencedDeclaration": 238,
                        "src": "3511:10:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TimedOffer_$238_storage_ptr",
                          "typeString": "struct NftTrader.TimedOffer"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 537,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 532,
                        "name": "timedOffers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 218,
                        "src": "3537:11:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_TimedOffer_$238_storage_$_$",
                          "typeString": "mapping(address => mapping(uint256 => struct NftTrader.TimedOffer storage ref))"
                        }
                      },
                      "id": 534,
                      "indexExpression": {
                        "id": 533,
                        "name": "contractAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 518,
                        "src": "3549:12:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "3537:25:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TimedOffer_$238_storage_$",
                        "typeString": "mapping(uint256 => struct NftTrader.TimedOffer storage ref)"
                      }
                    },
                    "id": 536,
                    "indexExpression": {
                      "id": 535,
                      "name": "tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 520,
                      "src": "3563:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3537:34:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TimedOffer_$238_storage",
                      "typeString": "struct NftTrader.TimedOffer storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3511:60:17"
                },
                {
                  "expression": {
                    "id": 541,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 538,
                      "name": "minPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 523,
                      "src": "3581:8:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 539,
                        "name": "offer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 531,
                        "src": "3592:5:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TimedOffer_$238_memory_ptr",
                          "typeString": "struct NftTrader.TimedOffer memory"
                        }
                      },
                      "id": 540,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "minPrice",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 233,
                      "src": "3592:14:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3581:25:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 542,
                  "nodeType": "ExpressionStatement",
                  "src": "3581:25:17"
                },
                {
                  "expression": {
                    "id": 546,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 543,
                      "name": "isSet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 527,
                      "src": "3616:5:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 544,
                        "name": "offer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 531,
                        "src": "3624:5:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TimedOffer_$238_memory_ptr",
                          "typeString": "struct NftTrader.TimedOffer memory"
                        }
                      },
                      "id": 545,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isSet",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 237,
                      "src": "3624:11:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3616:19:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 547,
                  "nodeType": "ExpressionStatement",
                  "src": "3616:19:17"
                },
                {
                  "expression": {
                    "id": 553,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 548,
                      "name": "currentPrice",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 525,
                      "src": "3645:12:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 550,
                          "name": "contractAddr",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 518,
                          "src": "3674:12:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 551,
                          "name": "tokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 520,
                          "src": "3688:7:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 549,
                        "name": "getTimedPrice",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 516,
                        "src": "3660:13:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                          "typeString": "function (address,uint256) view returns (uint256)"
                        }
                      },
                      "id": 552,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3660:36:17",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3645:51:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 554,
                  "nodeType": "ExpressionStatement",
                  "src": "3645:51:17"
                }
              ]
            },
            "functionSelector": "cdffe0c5",
            "id": 556,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTimedOffer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 521,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 518,
                  "mutability": "mutable",
                  "name": "contractAddr",
                  "nodeType": "VariableDeclaration",
                  "scope": 556,
                  "src": "3359:20:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 517,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3359:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 520,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 556,
                  "src": "3381:15:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 519,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3381:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3358:39:17"
            },
            "returnParameters": {
              "id": 528,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 523,
                  "mutability": "mutable",
                  "name": "minPrice",
                  "nodeType": "VariableDeclaration",
                  "scope": 556,
                  "src": "3428:16:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 522,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3428:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 525,
                  "mutability": "mutable",
                  "name": "currentPrice",
                  "nodeType": "VariableDeclaration",
                  "scope": 556,
                  "src": "3454:20:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 524,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3454:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 527,
                  "mutability": "mutable",
                  "name": "isSet",
                  "nodeType": "VariableDeclaration",
                  "scope": 556,
                  "src": "3484:10:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 526,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3484:4:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3418:82:17"
            },
            "scope": 737,
            "src": "3336:367:17",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 601,
              "nodeType": "Block",
              "src": "3826:298:17",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 569,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 566,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "3844:3:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 567,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "3844:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 568,
                          "name": "tradeOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 227,
                          "src": "3858:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "3844:24:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4973206e6f74206f776e6572206f662074686520747261646520636f6e7472616374",
                        "id": 570,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3870:36:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b1597cd1c00faa9cd3fdb9e70c99fa296526cac64d89ac7e50355441084c76c5",
                          "typeString": "literal_string \"Is not owner of the trade contract\""
                        },
                        "value": "Is not owner of the trade contract"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b1597cd1c00faa9cd3fdb9e70c99fa296526cac64d89ac7e50355441084c76c5",
                          "typeString": "literal_string \"Is not owner of the trade contract\""
                        }
                      ],
                      "id": 565,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3836:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 571,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3836:71:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 572,
                  "nodeType": "ExpressionStatement",
                  "src": "3836:71:17"
                },
                {
                  "assignments": [
                    575
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 575,
                      "mutability": "mutable",
                      "name": "token",
                      "nodeType": "VariableDeclaration",
                      "scope": 601,
                      "src": "3918:12:17",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC721_$1673",
                        "typeString": "contract ERC721"
                      },
                      "typeName": {
                        "id": 574,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 573,
                          "name": "ERC721",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1673,
                          "src": "3918:6:17"
                        },
                        "referencedDeclaration": 1673,
                        "src": "3918:6:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC721_$1673",
                          "typeString": "contract ERC721"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 579,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 577,
                        "name": "contractAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 560,
                        "src": "3940:12:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 576,
                      "name": "ERC721",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1673,
                      "src": "3933:6:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_ERC721_$1673_$",
                        "typeString": "type(contract ERC721)"
                      }
                    },
                    "id": 578,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3933:20:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC721_$1673",
                      "typeString": "contract ERC721"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3918:35:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 586,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 583,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 562,
                              "src": "3985:7:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 581,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 575,
                              "src": "3971:5:17",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC721_$1673",
                                "typeString": "contract ERC721"
                              }
                            },
                            "id": 582,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "ownerOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 988,
                            "src": "3971:13:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (uint256) view external returns (address)"
                            }
                          },
                          "id": 584,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3971:22:17",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 585,
                          "name": "tradeOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 227,
                          "src": "3997:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "3971:36:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4973206e6f74206f776e6572206f662045524337323120746f6b656e",
                        "id": 587,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4009:30:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_def1d321e6d440d01a2e2ff2df14bdd47cbc373288cd08d9138a62d56fc03687",
                          "typeString": "literal_string \"Is not owner of ERC721 token\""
                        },
                        "value": "Is not owner of ERC721 token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_def1d321e6d440d01a2e2ff2df14bdd47cbc373288cd08d9138a62d56fc03687",
                          "typeString": "literal_string \"Is not owner of ERC721 token\""
                        }
                      ],
                      "id": 580,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3963:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 588,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3963:77:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 589,
                  "nodeType": "ExpressionStatement",
                  "src": "3963:77:17"
                },
                {
                  "expression": {
                    "id": 599,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 590,
                          "name": "constantOffers",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 225,
                          "src": "4051:14:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_ConstantOffer_$243_storage_$_$",
                            "typeString": "mapping(address => mapping(uint256 => struct NftTrader.ConstantOffer storage ref))"
                          }
                        },
                        "id": 593,
                        "indexExpression": {
                          "id": 591,
                          "name": "contractAddr",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 560,
                          "src": "4066:12:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4051:28:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ConstantOffer_$243_storage_$",
                          "typeString": "mapping(uint256 => struct NftTrader.ConstantOffer storage ref)"
                        }
                      },
                      "id": 594,
                      "indexExpression": {
                        "id": 592,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 562,
                        "src": "4080:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4051:37:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ConstantOffer_$243_storage",
                        "typeString": "struct NftTrader.ConstantOffer storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 596,
                          "name": "price",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 558,
                          "src": "4105:5:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "hexValue": "74727565",
                          "id": 597,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4112:4:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        ],
                        "id": 595,
                        "name": "ConstantOffer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 243,
                        "src": "4091:13:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_ConstantOffer_$243_storage_ptr_$",
                          "typeString": "type(struct NftTrader.ConstantOffer storage pointer)"
                        }
                      },
                      "id": 598,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4091:26:17",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ConstantOffer_$243_memory_ptr",
                        "typeString": "struct NftTrader.ConstantOffer memory"
                      }
                    },
                    "src": "4051:66:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ConstantOffer_$243_storage",
                      "typeString": "struct NftTrader.ConstantOffer storage ref"
                    }
                  },
                  "id": 600,
                  "nodeType": "ExpressionStatement",
                  "src": "4051:66:17"
                }
              ]
            },
            "functionSelector": "5768b4c4",
            "id": 602,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addConstantOffer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 563,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 558,
                  "mutability": "mutable",
                  "name": "price",
                  "nodeType": "VariableDeclaration",
                  "scope": 602,
                  "src": "3744:13:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 557,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3744:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 560,
                  "mutability": "mutable",
                  "name": "contractAddr",
                  "nodeType": "VariableDeclaration",
                  "scope": 602,
                  "src": "3767:20:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 559,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3767:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 562,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 602,
                  "src": "3797:15:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 561,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3797:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3734:84:17"
            },
            "returnParameters": {
              "id": 564,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3826:0:17"
            },
            "scope": 737,
            "src": "3709:415:17",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 624,
              "nodeType": "Block",
              "src": "4205:142:17",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 613,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 610,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "4223:3:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 611,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "4223:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 612,
                          "name": "tradeOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 227,
                          "src": "4237:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "4223:24:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4973206e6f74206f776e6572206f662074686520747261646520636f6e7472616374",
                        "id": 614,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4249:36:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b1597cd1c00faa9cd3fdb9e70c99fa296526cac64d89ac7e50355441084c76c5",
                          "typeString": "literal_string \"Is not owner of the trade contract\""
                        },
                        "value": "Is not owner of the trade contract"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b1597cd1c00faa9cd3fdb9e70c99fa296526cac64d89ac7e50355441084c76c5",
                          "typeString": "literal_string \"Is not owner of the trade contract\""
                        }
                      ],
                      "id": 609,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4215:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 615,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4215:71:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 616,
                  "nodeType": "ExpressionStatement",
                  "src": "4215:71:17"
                },
                {
                  "expression": {
                    "id": 622,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "4296:44:17",
                    "subExpression": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 617,
                          "name": "constantOffers",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 225,
                          "src": "4303:14:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_ConstantOffer_$243_storage_$_$",
                            "typeString": "mapping(address => mapping(uint256 => struct NftTrader.ConstantOffer storage ref))"
                          }
                        },
                        "id": 619,
                        "indexExpression": {
                          "id": 618,
                          "name": "contractAddr",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 604,
                          "src": "4318:12:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4303:28:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ConstantOffer_$243_storage_$",
                          "typeString": "mapping(uint256 => struct NftTrader.ConstantOffer storage ref)"
                        }
                      },
                      "id": 621,
                      "indexExpression": {
                        "id": 620,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 606,
                        "src": "4332:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4303:37:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ConstantOffer_$243_storage",
                        "typeString": "struct NftTrader.ConstantOffer storage ref"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 623,
                  "nodeType": "ExpressionStatement",
                  "src": "4296:44:17"
                }
              ]
            },
            "functionSelector": "25e8aa1f",
            "id": 625,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deleteConstantOffer",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 607,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 604,
                  "mutability": "mutable",
                  "name": "contractAddr",
                  "nodeType": "VariableDeclaration",
                  "scope": 625,
                  "src": "4159:20:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 603,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4159:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 606,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 625,
                  "src": "4181:15:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 605,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4181:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4158:39:17"
            },
            "returnParameters": {
              "id": 608,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4205:0:17"
            },
            "scope": 737,
            "src": "4130:217:17",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 679,
              "nodeType": "Block",
              "src": "4433:367:17",
              "statements": [
                {
                  "assignments": [
                    634
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 634,
                      "mutability": "mutable",
                      "name": "offer",
                      "nodeType": "VariableDeclaration",
                      "scope": 679,
                      "src": "4443:26:17",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ConstantOffer_$243_memory_ptr",
                        "typeString": "struct NftTrader.ConstantOffer"
                      },
                      "typeName": {
                        "id": 633,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 632,
                          "name": "ConstantOffer",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 243,
                          "src": "4443:13:17"
                        },
                        "referencedDeclaration": 243,
                        "src": "4443:13:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ConstantOffer_$243_storage_ptr",
                          "typeString": "struct NftTrader.ConstantOffer"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 640,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 635,
                        "name": "constantOffers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 225,
                        "src": "4472:14:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_ConstantOffer_$243_storage_$_$",
                          "typeString": "mapping(address => mapping(uint256 => struct NftTrader.ConstantOffer storage ref))"
                        }
                      },
                      "id": 637,
                      "indexExpression": {
                        "id": 636,
                        "name": "contractAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 627,
                        "src": "4487:12:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "4472:28:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ConstantOffer_$243_storage_$",
                        "typeString": "mapping(uint256 => struct NftTrader.ConstantOffer storage ref)"
                      }
                    },
                    "id": 639,
                    "indexExpression": {
                      "id": 638,
                      "name": "tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 629,
                      "src": "4501:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4472:37:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ConstantOffer_$243_storage",
                      "typeString": "struct NftTrader.ConstantOffer storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4443:66:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 642,
                          "name": "offer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 634,
                          "src": "4527:5:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ConstantOffer_$243_memory_ptr",
                            "typeString": "struct NftTrader.ConstantOffer memory"
                          }
                        },
                        "id": 643,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "isSet",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 242,
                        "src": "4527:11:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f66666572206e6f7420666f756e64",
                        "id": 644,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4540:17:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_35be6e644a93fcba8894b7c266547cb081c5c0c2d487582e197d4427247e6dd7",
                          "typeString": "literal_string \"Offer not found\""
                        },
                        "value": "Offer not found"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_35be6e644a93fcba8894b7c266547cb081c5c0c2d487582e197d4427247e6dd7",
                          "typeString": "literal_string \"Offer not found\""
                        }
                      ],
                      "id": 641,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4519:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 645,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4519:39:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 646,
                  "nodeType": "ExpressionStatement",
                  "src": "4519:39:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 652,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 648,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "4576:3:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 649,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "4576:9:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "expression": {
                            "id": 650,
                            "name": "offer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 634,
                            "src": "4589:5:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ConstantOffer_$243_memory_ptr",
                              "typeString": "struct NftTrader.ConstantOffer memory"
                            }
                          },
                          "id": 651,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "price",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 240,
                          "src": "4589:11:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4576:24:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e73756666696369656e742066756e64732073656e74",
                        "id": 653,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4602:25:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ef04984094766165d0f3292abebb7fe2c98e15506095c629b0da789b5dea64bb",
                          "typeString": "literal_string \"Insufficient funds sent\""
                        },
                        "value": "Insufficient funds sent"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ef04984094766165d0f3292abebb7fe2c98e15506095c629b0da789b5dea64bb",
                          "typeString": "literal_string \"Insufficient funds sent\""
                        }
                      ],
                      "id": 647,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4568:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 654,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4568:60:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 655,
                  "nodeType": "ExpressionStatement",
                  "src": "4568:60:17"
                },
                {
                  "assignments": [
                    658
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 658,
                      "mutability": "mutable",
                      "name": "token",
                      "nodeType": "VariableDeclaration",
                      "scope": 679,
                      "src": "4639:12:17",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC721_$1673",
                        "typeString": "contract ERC721"
                      },
                      "typeName": {
                        "id": 657,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 656,
                          "name": "ERC721",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1673,
                          "src": "4639:6:17"
                        },
                        "referencedDeclaration": 1673,
                        "src": "4639:6:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC721_$1673",
                          "typeString": "contract ERC721"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 662,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 660,
                        "name": "contractAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 627,
                        "src": "4661:12:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 659,
                      "name": "ERC721",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1673,
                      "src": "4654:6:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_ERC721_$1673_$",
                        "typeString": "type(contract ERC721)"
                      }
                    },
                    "id": 661,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4654:20:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC721_$1673",
                      "typeString": "contract ERC721"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4639:35:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 666,
                        "name": "tradeOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 227,
                        "src": "4707:10:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "expression": {
                          "id": 667,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "4719:3:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 668,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "4719:10:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 669,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 629,
                        "src": "4731:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 663,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 658,
                        "src": "4684:5:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC721_$1673",
                          "typeString": "contract ERC721"
                        }
                      },
                      "id": 665,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1204,
                      "src": "4684:22:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256) external"
                      }
                    },
                    "id": 670,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4684:55:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 671,
                  "nodeType": "ExpressionStatement",
                  "src": "4684:55:17"
                },
                {
                  "expression": {
                    "id": 677,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "4749:44:17",
                    "subExpression": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 672,
                          "name": "constantOffers",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 225,
                          "src": "4756:14:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_ConstantOffer_$243_storage_$_$",
                            "typeString": "mapping(address => mapping(uint256 => struct NftTrader.ConstantOffer storage ref))"
                          }
                        },
                        "id": 674,
                        "indexExpression": {
                          "id": 673,
                          "name": "contractAddr",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 627,
                          "src": "4771:12:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4756:28:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ConstantOffer_$243_storage_$",
                          "typeString": "mapping(uint256 => struct NftTrader.ConstantOffer storage ref)"
                        }
                      },
                      "id": 676,
                      "indexExpression": {
                        "id": 675,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 629,
                        "src": "4785:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4756:37:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ConstantOffer_$243_storage",
                        "typeString": "struct NftTrader.ConstantOffer storage ref"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 678,
                  "nodeType": "ExpressionStatement",
                  "src": "4749:44:17"
                }
              ]
            },
            "functionSelector": "b4a30afb",
            "id": 680,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "constantPurchase",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 630,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 627,
                  "mutability": "mutable",
                  "name": "contractAddr",
                  "nodeType": "VariableDeclaration",
                  "scope": 680,
                  "src": "4379:20:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 626,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4379:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 629,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 680,
                  "src": "4401:15:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 628,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4401:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4378:39:17"
            },
            "returnParameters": {
              "id": 631,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4433:0:17"
            },
            "scope": 737,
            "src": "4353:447:17",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 713,
              "nodeType": "Block",
              "src": "4833:249:17",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 687,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 684,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "4851:3:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 685,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "4851:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 686,
                          "name": "tradeOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 227,
                          "src": "4865:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "4851:24:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4973206e6f74206f776e6572206f662074686520747261646520636f6e7472616374",
                        "id": 688,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4877:36:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b1597cd1c00faa9cd3fdb9e70c99fa296526cac64d89ac7e50355441084c76c5",
                          "typeString": "literal_string \"Is not owner of the trade contract\""
                        },
                        "value": "Is not owner of the trade contract"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b1597cd1c00faa9cd3fdb9e70c99fa296526cac64d89ac7e50355441084c76c5",
                          "typeString": "literal_string \"Is not owner of the trade contract\""
                        }
                      ],
                      "id": 683,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4843:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 689,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4843:71:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 690,
                  "nodeType": "ExpressionStatement",
                  "src": "4843:71:17"
                },
                {
                  "assignments": [
                    692
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 692,
                      "mutability": "mutable",
                      "name": "amount",
                      "nodeType": "VariableDeclaration",
                      "scope": 713,
                      "src": "4924:14:17",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 691,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4924:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 698,
                  "initialValue": {
                    "expression": {
                      "arguments": [
                        {
                          "id": 695,
                          "name": "this",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -28,
                          "src": "4949:4:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_NftTrader_$737",
                            "typeString": "contract NftTrader"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_NftTrader_$737",
                            "typeString": "contract NftTrader"
                          }
                        ],
                        "id": 694,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "4941:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 693,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4941:7:17",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 696,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4941:13:17",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 697,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "balance",
                    "nodeType": "MemberAccess",
                    "src": "4941:21:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4924:38:17"
                },
                {
                  "assignments": [
                    700,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 700,
                      "mutability": "mutable",
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 713,
                      "src": "4973:12:17",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 699,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "4973:4:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 707,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "",
                        "id": 705,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5022:2:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                            "typeString": "literal_string \"\""
                          }
                        ],
                        "expression": {
                          "id": 701,
                          "name": "tradeOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 227,
                          "src": "4990:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "id": 702,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "call",
                        "nodeType": "MemberAccess",
                        "src": "4990:15:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                        }
                      },
                      "id": 704,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "id": 703,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 692,
                          "src": "5014:6:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "4990:31:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 706,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4990:35:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4972:53:17"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 709,
                        "name": "success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 700,
                        "src": "5043:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4661696c656420746f2073656e64204574686572",
                        "id": 710,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5052:22:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb",
                          "typeString": "literal_string \"Failed to send Ether\""
                        },
                        "value": "Failed to send Ether"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb",
                          "typeString": "literal_string \"Failed to send Ether\""
                        }
                      ],
                      "id": 708,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5035:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 711,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5035:40:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 712,
                  "nodeType": "ExpressionStatement",
                  "src": "5035:40:17"
                }
              ]
            },
            "functionSelector": "3ccfd60b",
            "id": 714,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 681,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4823:2:17"
            },
            "returnParameters": {
              "id": 682,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4833:0:17"
            },
            "scope": 737,
            "src": "4806:276:17",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 735,
              "nodeType": "Block",
              "src": "5147:129:17",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 723,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 720,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "5165:3:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 721,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "5165:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 722,
                          "name": "tradeOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 227,
                          "src": "5179:10:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "5165:24:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4973206e6f74206f776e6572206f662074686520747261646520636f6e7472616374",
                        "id": 724,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5191:36:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b1597cd1c00faa9cd3fdb9e70c99fa296526cac64d89ac7e50355441084c76c5",
                          "typeString": "literal_string \"Is not owner of the trade contract\""
                        },
                        "value": "Is not owner of the trade contract"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b1597cd1c00faa9cd3fdb9e70c99fa296526cac64d89ac7e50355441084c76c5",
                          "typeString": "literal_string \"Is not owner of the trade contract\""
                        }
                      ],
                      "id": 719,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5157:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 725,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5157:71:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 726,
                  "nodeType": "ExpressionStatement",
                  "src": "5157:71:17"
                },
                {
                  "expression": {
                    "id": 733,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 727,
                      "name": "balance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 717,
                      "src": "5238:7:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "arguments": [
                          {
                            "id": 730,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "5256:4:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_NftTrader_$737",
                              "typeString": "contract NftTrader"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_NftTrader_$737",
                              "typeString": "contract NftTrader"
                            }
                          ],
                          "id": 729,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5248:7:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 728,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5248:7:17",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 731,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5248:13:17",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 732,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balance",
                      "nodeType": "MemberAccess",
                      "src": "5248:21:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5238:31:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 734,
                  "nodeType": "ExpressionStatement",
                  "src": "5238:31:17"
                }
              ]
            },
            "functionSelector": "12065fe0",
            "id": 736,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getBalance",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 715,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5107:2:17"
            },
            "returnParameters": {
              "id": 718,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 717,
                  "mutability": "mutable",
                  "name": "balance",
                  "nodeType": "VariableDeclaration",
                  "scope": 736,
                  "src": "5131:15:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 716,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5131:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5130:17:17"
            },
            "scope": 737,
            "src": "5088:188:17",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 738,
        "src": "234:5044:17"
      }
    ],
    "src": "39:5240:17"
  },
  "bytecode": "6080604052600280546001600160a01b03191633179055610fb2806100256000396000f3fe6080604052600436106100e85760003560e01c80636ff45c351161008a578063d423bf1211610059578063d423bf121461025f578063e2ab75ef14610290578063e8bef82d146102b2578063f3ed1a99146102d2576100e8565b80636ff45c35146101cf57806376fc2459146101fd578063b4a30afb1461021d578063cdffe0c514610230576100e8565b80632e94ca2a116100c65780632e94ca2a1461015a5780633ccfd60b1461017a5780635768b4c41461018f578063631c8a24146101af576100e8565b806312065fe0146100ed57806313af40351461011857806325e8aa1f1461013a575b600080fd5b3480156100f957600080fd5b506101026102e5565b60405161010f9190610e8a565b60405180910390f35b34801561012457600080fd5b50610138610133366004610c6e565b610320565b005b34801561014657600080fd5b50610138610155366004610c8a565b61036c565b34801561016657600080fd5b50610138610175366004610c8a565b6103c9565b34801561018657600080fd5b5061013861043c565b34801561019b57600080fd5b506101386101aa366004610cec565b6104ef565b3480156101bb57600080fd5b506101386101ca366004610cb5565b610614565b3480156101db57600080fd5b506101ef6101ea366004610c8a565b6106a2565b60405161010f929190610e93565b34801561020957600080fd5b50610102610218366004610c8a565b6106c6565b61013861022b366004610c8a565b610788565b34801561023c57600080fd5b5061025061024b366004610c8a565b6108a3565b60405161010f93929190610ea3565b34801561026b57600080fd5b5061027f61027a366004610c8a565b610918565b60405161010f959493929190610ebb565b34801561029c57600080fd5b506102a5610952565b60405161010f9190610d4b565b3480156102be57600080fd5b506101386102cd366004610d00565b610961565b6101386102e0366004610c8a565b610ab6565b6002546000906001600160a01b0316331461031b5760405162461bcd60e51b815260040161031290610dda565b60405180910390fd5b504790565b6002546001600160a01b0316331461034a5760405162461bcd60e51b815260040161031290610dda565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146103965760405162461bcd60e51b815260040161031290610dda565b6001600160a01b03909116600090815260016020818152604080842094845293905291812090815501805460ff19169055565b6002546001600160a01b031633146103f35760405162461bcd60e51b815260040161031290610dda565b6001600160a01b0390911660009081526020818152604080832093835292905290812081815560018101829055600281018290556003810191909155600401805460ff19169055565b6002546001600160a01b031633146104665760405162461bcd60e51b815260040161031290610dda565b60025460405147916000916001600160a01b0390911690839061048890610d48565b60006040518083038185875af1925050503d80600081146104c5576040519150601f19603f3d011682016040523d82523d6000602084013e6104ca565b606091505b50509050806104eb5760405162461bcd60e51b815260040161031290610dac565b5050565b6002546001600160a01b031633146105195760405162461bcd60e51b815260040161031290610dda565b6002546040516331a9108f60e11b815283916001600160a01b039081169190831690636352211e9061054f908690600401610e8a565b60206040518083038186803b15801561056757600080fd5b505afa15801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f9190610c52565b6001600160a01b0316146105c55760405162461bcd60e51b815260040161031290610e1c565b50604080518082018252938452600160208086018281526001600160a01b0395909516600090815282825283812094815293905291209251835590519101805460ff1916911515919091179055565b6002546001600160a01b0316331461063e5760405162461bcd60e51b815260040161031290610dda565b6001600160a01b0382166000908152602081815260408083208484529091529020600481015460ff166106835760405162461bcd60e51b815260040161031290610d83565b838160000160008282546106979190610ee0565b909155505050505050565b60016020818152600093845260408085209091529183529120805491015460ff1682565b6001600160a01b0382166000908152602081815260408083208484528252808320815160a08101835281548152600182015493810193909352600281015491830191909152600381015460608301526004015460ff16158015608083015261077c57600061074461073b428460000151610c10565b62015180610c23565b90506000610763836060015161075e848660200151610c2f565b610c10565b9050610773836040015182610c3b565b93505050610781565b600091505b5092915050565b6001600160a01b03821660009081526001602081815260408084208585528252928390208351808501909452805484529091015460ff1615159082018190526107e35760405162461bcd60e51b815260040161031290610d83565b80513410156108045760405162461bcd60e51b815260040161031290610e53565b600254604051632142170760e11b815284916001600160a01b03808416926342842e0e9261083a92169033908890600401610d5f565b600060405180830381600087803b15801561085457600080fd5b505af1158015610868573d6000803e3d6000fd5b5050506001600160a01b039094166000908152600160208181526040808420968452959052938120908155909201805460ff19169055505050565b6001600160a01b0382166000908152602081815260408083208484528252808320815160a081018352815481526001820154938101939093526002810154918301829052600381015460608401526004015460ff1615156080830181905290929161090e86866106c6565b9250509250925092565b6000602081815292815260408082209093529081522080546001820154600283015460038401546004909401549293919290919060ff1685565b6002546001600160a01b031681565b6002546001600160a01b0316331461098b5760405162461bcd60e51b815260040161031290610dda565b6002546040516331a9108f60e11b815283916001600160a01b039081169190831690636352211e906109c1908690600401610e8a565b60206040518083038186803b1580156109d957600080fd5b505afa1580156109ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a119190610c52565b6001600160a01b031614610a375760405162461bcd60e51b815260040161031290610e1c565b506040805160a0810182524281526020808201978852818301968752606082019586526001608083018181526001600160a01b0396909616600090815280835284812095815294909152919092209151825594519481019490945591516002840155516003830155516004909101805460ff1916911515919091179055565b6001600160a01b038216600090815260208181526040808320848452825291829020825160a081018452815481526001820154928101929092526002810154928201929092526003820154606082015260049091015460ff16151560808201819052610b345760405162461bcd60e51b815260040161031290610d83565b610b3e83836106c6565b341015610b5d5760405162461bcd60e51b815260040161031290610e53565b600254604051632142170760e11b815284916001600160a01b03808416926342842e0e92610b9392169033908890600401610d5f565b600060405180830381600087803b158015610bad57600080fd5b505af1158015610bc1573d6000803e3d6000fd5b5050506001600160a01b03909416600090815260208181526040808320958352949052928320838155600181018490556002810184905560038101939093555050600401805460ff1916905550565b6000610c1c8284610f37565b9392505050565b6000610c1c8284610ef8565b6000610c1c8284610f18565b600081831015610c4b5781610c1c565b5090919050565b600060208284031215610c63578081fd5b8151610c1c81610f64565b600060208284031215610c7f578081fd5b8135610c1c81610f64565b60008060408385031215610c9c578081fd5b8235610ca781610f64565b946020939093013593505050565b600080600060608486031215610cc9578081fd5b833592506020840135610cdb81610f64565b929592945050506040919091013590565b600080600060608486031215610cc9578283fd5b600080600080600060a08688031215610d17578081fd5b8535945060208601359350604086013592506060860135610d3781610f64565b949793965091946080013592915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252600f908201526e13d999995c881b9bdd08199bdd5b99608a1b604082015260600190565b6020808252601490820152732330b4b632b2103a379039b2b7321022ba3432b960611b604082015260600190565b60208082526022908201527f4973206e6f74206f776e6572206f662074686520747261646520636f6e74726160408201526118dd60f21b606082015260800190565b6020808252601c908201527f4973206e6f74206f776e6572206f662045524337323120746f6b656e00000000604082015260600190565b60208082526017908201527f496e73756666696369656e742066756e64732073656e74000000000000000000604082015260600190565b90815260200190565b9182521515602082015260400190565b92835260208301919091521515604082015260600190565b9485526020850193909352604084019190915260608301521515608082015260a00190565b60008219821115610ef357610ef3610f4e565b500190565b600082610f1357634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610f3257610f32610f4e565b500290565b600082821015610f4957610f49610f4e565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610f7957600080fd5b5056fea2646970667358221220dc14a2a2fa2802841f4c3ebce1aaadf6e98b7382ec398470995bbf6ba00f514864736f6c63430008000033",
  "bytecodeSha1": "050b14cac02b4b79bce4b65857e126ecf5613c15",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.0+commit.c7dfd78e"
  },
  "contractName": "NftTrader",
  "coverageMap": {
    "branches": {
      "1": {},
      "11": {},
      "12": {},
      "13": {},
      "14": {
        "Math.max": {
          "48": [
            354,
            360,
            true
          ]
        }
      },
      "15": {},
      "17": {
        "NftTrader.addConstantOffer": {
          "40": [
            3844,
            3868,
            true
          ],
          "41": [
            3971,
            4007,
            true
          ]
        },
        "NftTrader.addTimedOffer": {
          "45": [
            1221,
            1245,
            true
          ],
          "46": [
            1348,
            1384,
            true
          ]
        },
        "NftTrader.constantPurchase": {
          "44": [
            4576,
            4600,
            true
          ]
        },
        "NftTrader.deleteConstantOffer": {
          "36": [
            4223,
            4247,
            true
          ]
        },
        "NftTrader.deleteTimedOffer": {
          "37": [
            2098,
            2122,
            true
          ]
        },
        "NftTrader.getBalance": {
          "34": [
            5165,
            5189,
            true
          ]
        },
        "NftTrader.offsetTimedOffer": {
          "42": [
            1759,
            1783,
            true
          ],
          "43": [
            1912,
            1923,
            true
          ]
        },
        "NftTrader.setOwner": {
          "35": [
            921,
            945,
            true
          ]
        },
        "NftTrader.timedPurchase": {
          "47": [
            2439,
            2488,
            true
          ]
        },
        "NftTrader.withdraw": {
          "38": [
            4851,
            4875,
            true
          ],
          "39": [
            5043,
            5050,
            true
          ]
        }
      },
      "2": {},
      "3": {},
      "7": {},
      "8": {},
      "9": {}
    },
    "statements": {
      "1": {},
      "11": {},
      "12": {},
      "13": {},
      "14": {
        "Math.max": {
          "33": [
            347,
            368
          ]
        }
      },
      "15": {
        "SafeMath.div": {
          "31": [
            3913,
            3925
          ]
        },
        "SafeMath.mul": {
          "32": [
            3528,
            3540
          ]
        },
        "SafeMath.sub": {
          "30": [
            3185,
            3197
          ]
        }
      },
      "17": {
        "NftTrader.addConstantOffer": {
          "10": [
            3836,
            3907
          ],
          "11": [
            3963,
            4040
          ],
          "12": [
            4051,
            4117
          ]
        },
        "NftTrader.addTimedOffer": {
          "23": [
            1213,
            1284
          ],
          "24": [
            1340,
            1417
          ],
          "25": [
            1428,
            1604
          ]
        },
        "NftTrader.constantPurchase": {
          "18": [
            4519,
            4558
          ],
          "19": [
            4568,
            4628
          ],
          "20": [
            4684,
            4739
          ],
          "21": [
            4749,
            4793
          ]
        },
        "NftTrader.deleteConstantOffer": {
          "4": [
            4215,
            4286
          ],
          "5": [
            4296,
            4340
          ]
        },
        "NftTrader.deleteTimedOffer": {
          "6": [
            2090,
            2161
          ],
          "7": [
            2171,
            2212
          ]
        },
        "NftTrader.getBalance": {
          "0": [
            5157,
            5228
          ],
          "1": [
            5238,
            5269
          ]
        },
        "NftTrader.getTimedOffer": {
          "22": [
            3645,
            3696
          ]
        },
        "NftTrader.getTimedPrice": {
          "16": [
            3202,
            3258
          ],
          "17": [
            3297,
            3313
          ]
        },
        "NftTrader.offsetTimedOffer": {
          "13": [
            1751,
            1822
          ],
          "14": [
            1904,
            1943
          ],
          "15": [
            1954,
            1995
          ]
        },
        "NftTrader.setOwner": {
          "2": [
            913,
            984
          ],
          "3": [
            994,
            1015
          ]
        },
        "NftTrader.timedPurchase": {
          "26": [
            2382,
            2421
          ],
          "27": [
            2431,
            2516
          ],
          "28": [
            2572,
            2627
          ],
          "29": [
            2637,
            2678
          ]
        },
        "NftTrader.withdraw": {
          "8": [
            4843,
            4914
          ],
          "9": [
            5035,
            5075
          ]
        }
      },
      "2": {},
      "3": {},
      "7": {},
      "8": {},
      "9": {}
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.4.0/Address",
    "OpenZeppelin/openzeppelin-contracts@4.4.0/Context",
    "OpenZeppelin/openzeppelin-contracts@4.4.0/ERC165",
    "OpenZeppelin/openzeppelin-contracts@4.4.0/ERC721",
    "OpenZeppelin/openzeppelin-contracts@4.4.0/IERC165",
    "OpenZeppelin/openzeppelin-contracts@4.4.0/IERC721",
    "OpenZeppelin/openzeppelin-contracts@4.4.0/IERC721Metadata",
    "OpenZeppelin/openzeppelin-contracts@4.4.0/IERC721Receiver",
    "OpenZeppelin/openzeppelin-contracts@4.4.0/Math",
    "OpenZeppelin/openzeppelin-contracts@4.4.0/SafeMath",
    "OpenZeppelin/openzeppelin-contracts@4.4.0/Strings"
  ],
  "deployedBytecode": "",
  "deployedSourceMap": "234:5044:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5088:188;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;852:170;;;;;;;;;;-1:-1:-1;852:170:17;;;;;:::i;:::-;;:::i;:::-;;4130:217;;;;;;;;;;-1:-1:-1;4130:217:17;;;;;:::i;:::-;;:::i;2008:211::-;;;;;;;;;;-1:-1:-1;2008:211:17;;;;;:::i;:::-;;:::i;4806:276::-;;;;;;;;;;;;;:::i;3709:415::-;;;;;;;;;;-1:-1:-1;3709:415:17;;;;;:::i;:::-;;:::i;1617:385::-;;;;;;;;;;-1:-1:-1;1617:385:17;;;;;:::i;:::-;;:::i;414:75::-;;;;;;;;;;-1:-1:-1;414:75:17;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;2691:639::-;;;;;;;;;;-1:-1:-1;2691:639:17;;;;;:::i;:::-;;:::i;4353:447::-;;;;;;:::i;:::-;;:::i;3336:367::-;;;;;;;;;;-1:-1:-1;3336:367:17;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;339:69::-;;;;;;;;;;-1:-1:-1;339:69:17;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;495:33::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1028:583::-;;;;;;;;;;-1:-1:-1;1028:583:17;;;;;:::i;:::-;;:::i;2225:460::-;;;;;;:::i;:::-;;:::i;5088:188::-;5179:10;;5131:15;;-1:-1:-1;;;;;5179:10:17;5165;:24;5157:71;;;;-1:-1:-1;;;5157:71:17;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;5248:21:17;;5088:188::o;852:170::-;935:10;;-1:-1:-1;;;;;935:10:17;921;:24;913:71;;;;-1:-1:-1;;;913:71:17;;;;;;;:::i;:::-;994:10;:21;;-1:-1:-1;;;;;;994:21:17;-1:-1:-1;;;;;994:21:17;;;;;;;;;;852:170::o;4130:217::-;4237:10;;-1:-1:-1;;;;;4237:10:17;4223;:24;4215:71;;;;-1:-1:-1;;;4215:71:17;;;;;;;:::i;:::-;-1:-1:-1;;;;;4303:28:17;;;;;;;:14;:28;;;;;;;;:37;;;;;;;;;4296:44;;;;;;-1:-1:-1;;4296:44:17;;;4130:217::o;2008:211::-;2112:10;;-1:-1:-1;;;;;2112:10:17;2098;:24;2090:71;;;;-1:-1:-1;;;2090:71:17;;;;;;;:::i;:::-;-1:-1:-1;;;;;2178:25:17;;;:11;:25;;;;;;;;;;;:34;;;;;;;;;2171:41;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2171:41:17;;;2008:211::o;4806:276::-;4865:10;;-1:-1:-1;;;;;4865:10:17;4851;:24;4843:71;;;;-1:-1:-1;;;4843:71:17;;;;;;;:::i;:::-;4990:10;;:35;;4941:21;;4924:14;;-1:-1:-1;;;;;4990:10:17;;;;4941:21;;4990:35;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4972:53;;;5043:7;5035:40;;;;-1:-1:-1;;;5035:40:17;;;;;;;:::i;:::-;4806:276;;:::o;3709:415::-;3858:10;;-1:-1:-1;;;;;3858:10:17;3844;:24;3836:71;;;;-1:-1:-1;;;3836:71:17;;;;;;;:::i;:::-;3997:10;;3971:22;;-1:-1:-1;;;3971:22:17;;3940:12;;-1:-1:-1;;;;;3997:10:17;;;;3971:13;;;;;;:22;;3985:7;;3971:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3971:36:17;;3963:77;;;;-1:-1:-1;;;3963:77:17;;;;;;;:::i;:::-;-1:-1:-1;4091:26:17;;;;;;;;;;;4112:4;4091:26;;;;;;;-1:-1:-1;;;;;4051:28:17;;;;-1:-1:-1;4051:28:17;;;;;;;;;:37;;;;;;;;:66;;;;;;;;;;-1:-1:-1;;4051:66:17;;;;;;;;;;3709:415::o;1617:385::-;1773:10;;-1:-1:-1;;;;;1773:10:17;1759;:24;1751:71;;;;-1:-1:-1;;;1751:71:17;;;;;;;:::i;:::-;-1:-1:-1;;;;;1860:25:17;;1833:24;1860:25;;;;;;;;;;;:34;;;;;;;;1912:11;;;;;;1904:39;;;;-1:-1:-1;;;1904:39:17;;;;;;;:::i;:::-;1981:13;1954:5;:15;;;:41;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;1617:385:17:o;414:75::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2691:639::-;-1:-1:-1;;;;;2845:25:17;;2783:20;2845:25;;;;;;;;;;;:34;;;;;;;;2819:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2889:435;;2920:18;2941:101;2971:46;2984:15;3001:5;:15;;;2971:12;:46::i;:::-;3019:9;2941:12;:101::i;:::-;2920:122;;3056:23;3082:106;3112:5;:14;;;3128:46;3141:10;3153:5;:20;;;3128:12;:46::i;:::-;3082:12;:106::i;:::-;3056:132;;3217:41;3226:5;:14;;;3242:15;3217:8;:41::i;:::-;3202:56;;2889:435;;;;;3312:1;3297:16;;2889:435;2691:639;;;;;:::o;4353:447::-;-1:-1:-1;;;;;4472:28:17;;4443:26;4472:28;;;:14;:28;;;;;;;;:37;;;;;;;;;4443:66;;;;;;;;;;;;;;;;;;;;;;;;;;4519:39;;;;-1:-1:-1;;;4519:39:17;;;;;;;:::i;:::-;4589:11;;4576:9;:24;;4568:60;;;;-1:-1:-1;;;4568:60:17;;;;;;;:::i;:::-;4707:10;;4684:55;;-1:-1:-1;;;4684:55:17;;4661:12;;-1:-1:-1;;;;;4684:22:17;;;;;;:55;;4707:10;;4719;;4731:7;;4684:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;4756:28:17;;;;;;;:14;:28;;;;;;;;:37;;;;;;;;;4749:44;;;;;;;;-1:-1:-1;;4749:44:17;;;-1:-1:-1;;;4353:447:17:o;3336:367::-;-1:-1:-1;;;;;3537:25:17;;3428:16;3537:25;;;;;;;;;;;:34;;;;;;;;3511:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3428:16;3660:36;3549:12;3563:7;3660:13;:36::i;:::-;3645:51;;3336:367;;;;;;:::o;339:69::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;495:33::-;;;-1:-1:-1;;;;;495:33:17;;:::o;1028:583::-;1235:10;;-1:-1:-1;;;;;1235:10:17;1221;:24;1213:71;;;;-1:-1:-1;;;1213:71:17;;;;;;;:::i;:::-;1374:10;;1348:22;;-1:-1:-1;;;1348:22:17;;1317:12;;-1:-1:-1;;;;;1374:10:17;;;;1348:13;;;;;;:22;;1362:7;;1348:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1348:36:17;;1340:77;;;;-1:-1:-1;;;1340:77:17;;;;;;;:::i;:::-;-1:-1:-1;1465:139:17;;;;;;;;1489:15;1465:139;;;;;;;;;;;;;;;;;;;;;1590:4;1465:139;;;;;;-1:-1:-1;;;;;1428:25:17;;;;-1:-1:-1;1428:25:17;;;;;;;;;:34;;;;;;;;;;;:176;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1428:176:17;;;;;;;;;;1028:583::o;2225:460::-;-1:-1:-1;;;;;2338:25:17;;2312:23;2338:25;;;;;;;;;;;:34;;;;;;;;;2312:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2382:39;;;;-1:-1:-1;;;2382:39:17;;;;;;;:::i;:::-;2452:36;2466:12;2480:7;2452:13;:36::i;:::-;2439:9;:49;;2431:85;;;;-1:-1:-1;;;2431:85:17;;;;;;;:::i;:::-;2595:10;;2572:55;;-1:-1:-1;;;2572:55:17;;2549:12;;-1:-1:-1;;;;;2572:22:17;;;;;;:55;;2595:10;;2607;;2619:7;;2572:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;2644:25:17;;;:11;:25;;;;;;;;;;;:34;;;;;;;;;2637:41;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2637:41:17;;;;-1:-1:-1;;2637:41:17;;;-1:-1:-1;2225:460:17:o;3108:96:15:-;3166:7;3192:5;3196:1;3192;:5;:::i;:::-;3185:12;3108:96;-1:-1:-1;;;3108:96:15:o;3836:::-;3894:7;3920:5;3924:1;3920;:5;:::i;3451:96::-;3509:7;3535:5;3539:1;3535;:5;:::i;270:105:14:-;328:7;359:1;354;:6;;:14;;367:1;354:14;;;-1:-1:-1;363:1:14;;270:105;-1:-1:-1;270:105:14:o;14:263:18:-;;137:2;125:9;116:7;112:23;108:32;105:2;;;158:6;150;143:22;105:2;195:9;189:16;214:33;241:5;214:33;:::i;282:267::-;;402:2;390:9;381:7;377:23;373:32;370:2;;;423:6;415;408:22;370:2;467:9;454:23;486:33;513:5;486:33;:::i;554:327::-;;;683:2;671:9;662:7;658:23;654:32;651:2;;;704:6;696;689:22;651:2;748:9;735:23;767:33;794:5;767:33;:::i;:::-;819:5;871:2;856:18;;;;843:32;;-1:-1:-1;;;641:240:18:o;886:394::-;;;;1031:2;1019:9;1010:7;1006:23;1002:32;999:2;;;1052:6;1044;1037:22;999:2;1093:9;1080:23;1070:33;;1153:2;1142:9;1138:18;1125:32;1166:33;1193:5;1166:33;:::i;:::-;989:291;;1218:5;;-1:-1:-1;;;1270:2:18;1255:18;;;;1242:32;;989:291::o;1285:395::-;;;;1431:2;1419:9;1410:7;1406:23;1402:32;1399:2;;;1452:6;1444;1437:22;1685:533;;;;;;1865:3;1853:9;1844:7;1840:23;1836:33;1833:2;;;1887:6;1879;1872:22;1833:2;1928:9;1915:23;1905:33;;1985:2;1974:9;1970:18;1957:32;1947:42;;2036:2;2025:9;2021:18;2008:32;1998:42;;2090:2;2079:9;2075:18;2062:32;2103:33;2130:5;2103:33;:::i;:::-;1823:395;;;;-1:-1:-1;1823:395:18;;2207:3;2192:19;2179:33;;1823:395;-1:-1:-1;;1823:395:18:o;2223:205::-;2423:3;2414:14::o;2433:219::-;-1:-1:-1;;;;;2613:32:18;;;;2595:51;;2583:2;2568:18;;2550:102::o;2657:383::-;-1:-1:-1;;;;;2923:15:18;;;2905:34;;2975:15;;;;2970:2;2955:18;;2948:43;3022:2;3007:18;;3000:34;;;;2855:2;2840:18;;2822:218::o;3045:339::-;3247:2;3229:21;;;3286:2;3266:18;;;3259:30;-1:-1:-1;;;3320:2:18;3305:18;;3298:45;3375:2;3360:18;;3219:165::o;3389:344::-;3591:2;3573:21;;;3630:2;3610:18;;;3603:30;-1:-1:-1;;;3664:2:18;3649:18;;3642:50;3724:2;3709:18;;3563:170::o;3738:398::-;3940:2;3922:21;;;3979:2;3959:18;;;3952:30;4018:34;4013:2;3998:18;;3991:62;-1:-1:-1;;;4084:2:18;4069:18;;4062:32;4126:3;4111:19;;3912:224::o;4141:352::-;4343:2;4325:21;;;4382:2;4362:18;;;4355:30;4421;4416:2;4401:18;;4394:58;4484:2;4469:18;;4315:178::o;4498:347::-;4700:2;4682:21;;;4739:2;4719:18;;;4712:30;4778:25;4773:2;4758:18;;4751:53;4836:2;4821:18;;4672:173::o;4850:177::-;4996:25;;;4984:2;4969:18;;4951:76::o;5032:258::-;5200:25;;;5268:14;5261:22;5256:2;5241:18;;5234:50;5188:2;5173:18;;5155:135::o;5295:329::-;5491:25;;;5547:2;5532:18;;5525:34;;;;5602:14;5595:22;5590:2;5575:18;;5568:50;5479:2;5464:18;;5446:178::o;5629:473::-;5882:25;;;5938:2;5923:18;;5916:34;;;;5981:2;5966:18;;5959:34;;;;6024:2;6009:18;;6002:34;6080:14;6073:22;6067:3;6052:19;;6045:51;5869:3;5854:19;;5836:266::o;6107:128::-;;6178:1;6174:6;6171:1;6168:13;6165:2;;;6184:18;;:::i;:::-;-1:-1:-1;6220:9:18;;6155:80::o;6240:217::-;;6306:1;6296:2;;-1:-1:-1;;;6331:31:18;;6385:4;6382:1;6375:15;6413:4;6338:1;6403:15;6296:2;-1:-1:-1;6442:9:18;;6286:171::o;6462:168::-;;6568:1;6564;6560:6;6556:14;6553:1;6550:21;6545:1;6538:9;6531:17;6527:45;6524:2;;;6575:18;;:::i;:::-;-1:-1:-1;6615:9:18;;6514:116::o;6635:125::-;;6703:1;6700;6697:8;6694:2;;;6708:18;;:::i;:::-;-1:-1:-1;6745:9:18;;6684:76::o;6765:127::-;6826:10;6821:3;6817:20;6814:1;6807:31;6857:4;6854:1;6847:15;6881:4;6878:1;6871:15;6897:133;-1:-1:-1;;;;;6974:31:18;;6964:42;;6954:2;;7020:1;7017;7010:12;6954:2;6944:86;:::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    234,
    5278
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FF45C35 GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xD423BF12 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xD423BF12 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0xE2AB75EF EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0xE8BEF82D EQ PUSH2 0x2B2 JUMPI DUP1 PUSH4 0xF3ED1A99 EQ PUSH2 0x2D2 JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0x6FF45C35 EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x76FC2459 EQ PUSH2 0x1FD JUMPI DUP1 PUSH4 0xB4A30AFB EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0xCDFFE0C5 EQ PUSH2 0x230 JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0x2E94CA2A GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x2E94CA2A EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0x5768B4C4 EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0x631C8A24 EQ PUSH2 0x1AF JUMPI PUSH2 0xE8 JUMP JUMPDEST DUP1 PUSH4 0x12065FE0 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x13AF4035 EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x25E8AA1F EQ PUSH2 0x13A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x2E5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0xE8A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x133 CALLDATASIZE PUSH1 0x4 PUSH2 0xC6E JUMP JUMPDEST PUSH2 0x320 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0xC8A JUMP JUMPDEST PUSH2 0x36C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0xC8A JUMP JUMPDEST PUSH2 0x3C9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x43C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x1AA CALLDATASIZE PUSH1 0x4 PUSH2 0xCEC JUMP JUMPDEST PUSH2 0x4EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0xCB5 JUMP JUMPDEST PUSH2 0x614 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EF PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0xC8A JUMP JUMPDEST PUSH2 0x6A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP3 SWAP2 SWAP1 PUSH2 0xE93 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102 PUSH2 0x218 CALLDATASIZE PUSH1 0x4 PUSH2 0xC8A JUMP JUMPDEST PUSH2 0x6C6 JUMP JUMPDEST PUSH2 0x138 PUSH2 0x22B CALLDATASIZE PUSH1 0x4 PUSH2 0xC8A JUMP JUMPDEST PUSH2 0x788 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x250 PUSH2 0x24B CALLDATASIZE PUSH1 0x4 PUSH2 0xC8A JUMP JUMPDEST PUSH2 0x8A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xEA3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27F PUSH2 0x27A CALLDATASIZE PUSH1 0x4 PUSH2 0xC8A JUMP JUMPDEST PUSH2 0x918 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xEBB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A5 PUSH2 0x952 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10F SWAP2 SWAP1 PUSH2 0xD4B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x2CD CALLDATASIZE PUSH1 0x4 PUSH2 0xD00 JUMP JUMPDEST PUSH2 0x961 JUMP JUMPDEST PUSH2 0x138 PUSH2 0x2E0 CALLDATASIZE PUSH1 0x4 PUSH2 0xC8A JUMP JUMPDEST PUSH2 0xAB6 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x31B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0xDDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP SELFBALANCE SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0xDDA JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x396 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0xDDA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP5 DUP5 MSTORE SWAP4 SWAP1 MSTORE SWAP2 DUP2 KECCAK256 SWAP1 DUP2 SSTORE ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0xDDA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x3 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x4 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x466 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0xDDA JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SELFBALANCE SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 SWAP1 PUSH2 0x488 SWAP1 PUSH2 0xD48 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4C5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4CA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x4EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0xDAC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x519 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0xDDA JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 SWAP1 DUP4 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH2 0x54F SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0xE8A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x567 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x57B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x59F SWAP2 SWAP1 PUSH2 0xC52 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0xE1C JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE SWAP4 DUP5 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP7 ADD DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE DUP3 DUP3 MSTORE DUP4 DUP2 KECCAK256 SWAP5 DUP2 MSTORE SWAP4 SWAP1 MSTORE SWAP2 KECCAK256 SWAP3 MLOAD DUP4 SSTORE SWAP1 MLOAD SWAP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x63E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0xDDA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x683 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0xD83 JUMP JUMPDEST DUP4 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x697 SWAP2 SWAP1 PUSH2 0xEE0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP1 SWAP2 MSTORE SWAP2 DUP4 MSTORE SWAP2 KECCAK256 DUP1 SLOAD SWAP2 ADD SLOAD PUSH1 0xFF AND DUP3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xA0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 ADD SLOAD PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x77C JUMPI PUSH1 0x0 PUSH2 0x744 PUSH2 0x73B TIMESTAMP DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0xC10 JUMP JUMPDEST PUSH3 0x15180 PUSH2 0xC23 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x763 DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0x75E DUP5 DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0xC2F JUMP JUMPDEST PUSH2 0xC10 JUMP JUMPDEST SWAP1 POP PUSH2 0x773 DUP4 PUSH1 0x40 ADD MLOAD DUP3 PUSH2 0xC3B JUMP JUMPDEST SWAP4 POP POP POP PUSH2 0x781 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP6 DUP6 MSTORE DUP3 MSTORE SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE DUP1 SLOAD DUP5 MSTORE SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x7E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0xD83 JUMP JUMPDEST DUP1 MLOAD CALLVALUE LT ISZERO PUSH2 0x804 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0xE53 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x21421707 PUSH1 0xE1 SHL DUP2 MSTORE DUP5 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 PUSH4 0x42842E0E SWAP3 PUSH2 0x83A SWAP3 AND SWAP1 CALLER SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xD5F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x854 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x868 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP7 DUP5 MSTORE SWAP6 SWAP1 MSTORE SWAP4 DUP2 KECCAK256 SWAP1 DUP2 SSTORE SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xA0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP2 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x80 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP3 SWAP2 PUSH2 0x90E DUP7 DUP7 PUSH2 0x6C6 JUMP JUMPDEST SWAP3 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 DUP2 MSTORE SWAP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 MSTORE SWAP1 DUP2 MSTORE KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP6 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x98B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0xDDA JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 SWAP1 DUP4 AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH2 0x9C1 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0xE8A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA11 SWAP2 SWAP1 PUSH2 0xC52 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA37 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0xE1C JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE TIMESTAMP DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP8 DUP9 MSTORE DUP2 DUP4 ADD SWAP7 DUP8 MSTORE PUSH1 0x60 DUP3 ADD SWAP6 DUP7 MSTORE PUSH1 0x1 PUSH1 0x80 DUP4 ADD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 SWAP1 SWAP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE DUP1 DUP4 MSTORE DUP5 DUP2 KECCAK256 SWAP6 DUP2 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 SWAP3 KECCAK256 SWAP2 MLOAD DUP3 SSTORE SWAP5 MLOAD SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 SSTORE SWAP2 MLOAD PUSH1 0x2 DUP5 ADD SSTORE MLOAD PUSH1 0x3 DUP4 ADD SSTORE MLOAD PUSH1 0x4 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0xB34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0xD83 JUMP JUMPDEST PUSH2 0xB3E DUP4 DUP4 PUSH2 0x6C6 JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0xB5D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0xE53 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x21421707 PUSH1 0xE1 SHL DUP2 MSTORE DUP5 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 PUSH4 0x42842E0E SWAP3 PUSH2 0xB93 SWAP3 AND SWAP1 CALLER SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xD5F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBC1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP6 DUP4 MSTORE SWAP5 SWAP1 MSTORE SWAP3 DUP4 KECCAK256 DUP4 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP5 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD DUP5 SWAP1 SSTORE PUSH1 0x3 DUP2 ADD SWAP4 SWAP1 SWAP4 SSTORE POP POP PUSH1 0x4 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1C DUP3 DUP5 PUSH2 0xF37 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1C DUP3 DUP5 PUSH2 0xEF8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1C DUP3 DUP5 PUSH2 0xF18 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT ISZERO PUSH2 0xC4B JUMPI DUP2 PUSH2 0xC1C JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC63 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xC1C DUP2 PUSH2 0xF64 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC7F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xC1C DUP2 PUSH2 0xF64 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC9C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xCA7 DUP2 PUSH2 0xF64 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xCC9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0xCDB DUP2 PUSH2 0xF64 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xCC9 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xD17 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0xD37 DUP2 PUSH2 0xF64 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP2 SWAP5 PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x13D999995C881B9BDD08199BDD5B99 PUSH1 0x8A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x4973206E6F74206F776E6572206F662074686520747261646520636F6E747261 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x18DD PUSH1 0xF2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x4973206E6F74206F776E6572206F662045524337323120746F6B656E00000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x17 SWAP1 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742066756E64732073656E74000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xEF3 JUMPI PUSH2 0xEF3 PUSH2 0xF4E JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xF13 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xF32 JUMPI PUSH2 0xF32 PUSH2 0xF4E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xF49 JUMPI PUSH2 0xF49 PUSH2 0xF4E JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xF79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC EQ LOG2 LOG2 STATICCALL 0x28 MUL DUP5 0x1F 0x4C RETURNDATACOPY 0xBC 0xE1 0xAA 0xAD 0xF6 0xE9 DUP12 PUSH20 0x82EC398470995BBF6BA00F514864736F6C634300 ADDMOD STOP STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        234,
        5278
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "5": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "8": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "LT",
      "path": "17"
    },
    "9": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xE8"
    },
    "12": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "13": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "CALLDATALOAD",
      "path": "17"
    },
    "16": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "SHR",
      "path": "17"
    },
    "19": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "20": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x6FF45C35"
    },
    "25": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "GT",
      "path": "17"
    },
    "26": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x8A"
    },
    "29": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "30": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "31": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0xD423BF12"
    },
    "36": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "GT",
      "path": "17"
    },
    "37": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x59"
    },
    "40": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "41": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "42": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0xD423BF12"
    },
    "47": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "EQ",
      "path": "17"
    },
    "48": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x25F"
    },
    "51": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "52": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "53": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0xE2AB75EF"
    },
    "58": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "EQ",
      "path": "17"
    },
    "59": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x290"
    },
    "62": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "63": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "64": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0xE8BEF82D"
    },
    "69": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "EQ",
      "path": "17"
    },
    "70": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x2B2"
    },
    "73": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "74": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "75": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0xF3ED1A99"
    },
    "80": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "EQ",
      "path": "17"
    },
    "81": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x2D2"
    },
    "84": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "85": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xE8"
    },
    "88": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMP",
      "path": "17"
    },
    "89": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "90": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "91": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x6FF45C35"
    },
    "96": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "EQ",
      "path": "17"
    },
    "97": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1CF"
    },
    "100": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "101": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "102": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x76FC2459"
    },
    "107": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "EQ",
      "path": "17"
    },
    "108": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1FD"
    },
    "111": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "112": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "113": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0xB4A30AFB"
    },
    "118": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "EQ",
      "path": "17"
    },
    "119": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x21D"
    },
    "122": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "123": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "124": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0xCDFFE0C5"
    },
    "129": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "EQ",
      "path": "17"
    },
    "130": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x230"
    },
    "133": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "134": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xE8"
    },
    "137": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMP",
      "path": "17"
    },
    "138": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "139": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "140": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x2E94CA2A"
    },
    "145": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "GT",
      "path": "17"
    },
    "146": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC6"
    },
    "149": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "150": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "151": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x2E94CA2A"
    },
    "156": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "EQ",
      "path": "17"
    },
    "157": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x15A"
    },
    "160": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "161": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "162": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x3CCFD60B"
    },
    "167": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "EQ",
      "path": "17"
    },
    "168": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x17A"
    },
    "171": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "172": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "173": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x5768B4C4"
    },
    "178": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "EQ",
      "path": "17"
    },
    "179": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x18F"
    },
    "182": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "183": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "184": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x631C8A24"
    },
    "189": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "EQ",
      "path": "17"
    },
    "190": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1AF"
    },
    "193": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "194": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xE8"
    },
    "197": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMP",
      "path": "17"
    },
    "198": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "199": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "200": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x12065FE0"
    },
    "205": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "EQ",
      "path": "17"
    },
    "206": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xED"
    },
    "209": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "210": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "211": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x13AF4035"
    },
    "216": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "EQ",
      "path": "17"
    },
    "217": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x118"
    },
    "220": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "221": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "222": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x25E8AA1F"
    },
    "227": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "EQ",
      "path": "17"
    },
    "228": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x13A"
    },
    "231": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "232": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "233": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "235": {
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "DUP1",
      "path": "17"
    },
    "236": {
      "first_revert": true,
      "fn": null,
      "offset": [
        234,
        5278
      ],
      "op": "REVERT",
      "path": "17"
    },
    "237": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "238": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "CALLVALUE",
      "path": "17"
    },
    "239": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "DUP1",
      "path": "17"
    },
    "240": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "241": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xF9"
    },
    "244": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "245": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "247": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "DUP1",
      "path": "17"
    },
    "248": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "REVERT",
      "path": "17"
    },
    "249": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "250": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "POP",
      "path": "17"
    },
    "251": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x102"
    },
    "254": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x2E5"
    },
    "257": {
      "fn": "NftTrader.getBalance",
      "jump": "i",
      "offset": [
        5088,
        5276
      ],
      "op": "JUMP",
      "path": "17"
    },
    "258": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "259": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "261": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "262": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x10F"
    },
    "265": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "266": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "267": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xE8A"
    },
    "270": {
      "fn": "NftTrader.getBalance",
      "jump": "i",
      "offset": [
        5088,
        5276
      ],
      "op": "JUMP",
      "path": "17"
    },
    "271": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "272": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "274": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "275": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "DUP1",
      "path": "17"
    },
    "276": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "277": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "SUB",
      "path": "17"
    },
    "278": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "279": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "RETURN",
      "path": "17"
    },
    "280": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "281": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "CALLVALUE",
      "path": "17"
    },
    "282": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "DUP1",
      "path": "17"
    },
    "283": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "284": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x124"
    },
    "287": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "288": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "290": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "DUP1",
      "path": "17"
    },
    "291": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "REVERT",
      "path": "17"
    },
    "292": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "293": {
      "op": "POP"
    },
    "294": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x138"
    },
    "297": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x133"
    },
    "300": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "301": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "303": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC6E"
    },
    "306": {
      "fn": "NftTrader.setOwner",
      "jump": "i",
      "offset": [
        852,
        1022
      ],
      "op": "JUMP",
      "path": "17"
    },
    "307": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "308": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x320"
    },
    "311": {
      "fn": "NftTrader.setOwner",
      "jump": "i",
      "offset": [
        852,
        1022
      ],
      "op": "JUMP",
      "path": "17"
    },
    "312": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "313": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "STOP",
      "path": "17"
    },
    "314": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "315": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "CALLVALUE",
      "path": "17"
    },
    "316": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "DUP1",
      "path": "17"
    },
    "317": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "318": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x146"
    },
    "321": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "322": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "324": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "DUP1",
      "path": "17"
    },
    "325": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "REVERT",
      "path": "17"
    },
    "326": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "327": {
      "op": "POP"
    },
    "328": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x138"
    },
    "331": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x155"
    },
    "334": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "335": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "337": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC8A"
    },
    "340": {
      "fn": "NftTrader.deleteConstantOffer",
      "jump": "i",
      "offset": [
        4130,
        4347
      ],
      "op": "JUMP",
      "path": "17"
    },
    "341": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "342": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x36C"
    },
    "345": {
      "fn": "NftTrader.deleteConstantOffer",
      "jump": "i",
      "offset": [
        4130,
        4347
      ],
      "op": "JUMP",
      "path": "17"
    },
    "346": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "347": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "CALLVALUE",
      "path": "17"
    },
    "348": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "DUP1",
      "path": "17"
    },
    "349": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "350": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x166"
    },
    "353": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "354": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "356": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "DUP1",
      "path": "17"
    },
    "357": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "REVERT",
      "path": "17"
    },
    "358": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "359": {
      "op": "POP"
    },
    "360": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x138"
    },
    "363": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x175"
    },
    "366": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "367": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "369": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC8A"
    },
    "372": {
      "fn": "NftTrader.deleteTimedOffer",
      "jump": "i",
      "offset": [
        2008,
        2219
      ],
      "op": "JUMP",
      "path": "17"
    },
    "373": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "374": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x3C9"
    },
    "377": {
      "fn": "NftTrader.deleteTimedOffer",
      "jump": "i",
      "offset": [
        2008,
        2219
      ],
      "op": "JUMP",
      "path": "17"
    },
    "378": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4806,
        5082
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "379": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4806,
        5082
      ],
      "op": "CALLVALUE",
      "path": "17"
    },
    "380": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4806,
        5082
      ],
      "op": "DUP1",
      "path": "17"
    },
    "381": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4806,
        5082
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "382": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4806,
        5082
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x186"
    },
    "385": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4806,
        5082
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "386": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4806,
        5082
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "388": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4806,
        5082
      ],
      "op": "DUP1",
      "path": "17"
    },
    "389": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4806,
        5082
      ],
      "op": "REVERT",
      "path": "17"
    },
    "390": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4806,
        5082
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "391": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4806,
        5082
      ],
      "op": "POP",
      "path": "17"
    },
    "392": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4806,
        5082
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x138"
    },
    "395": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4806,
        5082
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x43C"
    },
    "398": {
      "fn": "NftTrader.withdraw",
      "jump": "i",
      "offset": [
        4806,
        5082
      ],
      "op": "JUMP",
      "path": "17"
    },
    "399": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "400": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "CALLVALUE",
      "path": "17"
    },
    "401": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "DUP1",
      "path": "17"
    },
    "402": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "403": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x19B"
    },
    "406": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "407": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "409": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "DUP1",
      "path": "17"
    },
    "410": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "REVERT",
      "path": "17"
    },
    "411": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "412": {
      "op": "POP"
    },
    "413": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x138"
    },
    "416": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1AA"
    },
    "419": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "420": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "422": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xCEC"
    },
    "425": {
      "fn": "NftTrader.addConstantOffer",
      "jump": "i",
      "offset": [
        3709,
        4124
      ],
      "op": "JUMP",
      "path": "17"
    },
    "426": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "427": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x4EF"
    },
    "430": {
      "fn": "NftTrader.addConstantOffer",
      "jump": "i",
      "offset": [
        3709,
        4124
      ],
      "op": "JUMP",
      "path": "17"
    },
    "431": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "432": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "CALLVALUE",
      "path": "17"
    },
    "433": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "DUP1",
      "path": "17"
    },
    "434": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "435": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1BB"
    },
    "438": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "439": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "441": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "DUP1",
      "path": "17"
    },
    "442": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "REVERT",
      "path": "17"
    },
    "443": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "444": {
      "op": "POP"
    },
    "445": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x138"
    },
    "448": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1CA"
    },
    "451": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "452": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "454": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xCB5"
    },
    "457": {
      "fn": "NftTrader.offsetTimedOffer",
      "jump": "i",
      "offset": [
        1617,
        2002
      ],
      "op": "JUMP",
      "path": "17"
    },
    "458": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "459": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x614"
    },
    "462": {
      "fn": "NftTrader.offsetTimedOffer",
      "jump": "i",
      "offset": [
        1617,
        2002
      ],
      "op": "JUMP",
      "path": "17"
    },
    "463": {
      "offset": [
        414,
        489
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "464": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "CALLVALUE",
      "path": "17"
    },
    "465": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "DUP1",
      "path": "17"
    },
    "466": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "467": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1DB"
    },
    "470": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "471": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "473": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "DUP1",
      "path": "17"
    },
    "474": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "REVERT",
      "path": "17"
    },
    "475": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "476": {
      "op": "POP"
    },
    "477": {
      "offset": [
        414,
        489
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1EF"
    },
    "480": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x1EA"
    },
    "483": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "484": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "486": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC8A"
    },
    "489": {
      "fn": "NftTrader.offsetTimedOffer",
      "jump": "i",
      "offset": [
        414,
        489
      ],
      "op": "JUMP",
      "path": "17"
    },
    "490": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "491": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x6A2"
    },
    "494": {
      "fn": "NftTrader.offsetTimedOffer",
      "jump": "i",
      "offset": [
        414,
        489
      ],
      "op": "JUMP",
      "path": "17"
    },
    "495": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "496": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "498": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "499": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x10F"
    },
    "502": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "503": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "504": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "505": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xE93"
    },
    "508": {
      "fn": "NftTrader.offsetTimedOffer",
      "jump": "i",
      "offset": [
        414,
        489
      ],
      "op": "JUMP",
      "path": "17"
    },
    "509": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "510": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "CALLVALUE",
      "path": "17"
    },
    "511": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "DUP1",
      "path": "17"
    },
    "512": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "513": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x209"
    },
    "516": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "517": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "519": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "DUP1",
      "path": "17"
    },
    "520": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "REVERT",
      "path": "17"
    },
    "521": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "522": {
      "op": "POP"
    },
    "523": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x102"
    },
    "526": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x218"
    },
    "529": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "530": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "532": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC8A"
    },
    "535": {
      "fn": "NftTrader.getTimedPrice",
      "jump": "i",
      "offset": [
        2691,
        3330
      ],
      "op": "JUMP",
      "path": "17"
    },
    "536": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "537": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x6C6"
    },
    "540": {
      "fn": "NftTrader.getTimedPrice",
      "jump": "i",
      "offset": [
        2691,
        3330
      ],
      "op": "JUMP",
      "path": "17"
    },
    "541": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4353,
        4800
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "542": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4353,
        4800
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x138"
    },
    "545": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4353,
        4800
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x22B"
    },
    "548": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4353,
        4800
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "549": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4353,
        4800
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "551": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4353,
        4800
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC8A"
    },
    "554": {
      "fn": "NftTrader.constantPurchase",
      "jump": "i",
      "offset": [
        4353,
        4800
      ],
      "op": "JUMP",
      "path": "17"
    },
    "555": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4353,
        4800
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "556": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4353,
        4800
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x788"
    },
    "559": {
      "fn": "NftTrader.constantPurchase",
      "jump": "i",
      "offset": [
        4353,
        4800
      ],
      "op": "JUMP",
      "path": "17"
    },
    "560": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "561": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "CALLVALUE",
      "path": "17"
    },
    "562": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "DUP1",
      "path": "17"
    },
    "563": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "564": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x23C"
    },
    "567": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "568": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "570": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "DUP1",
      "path": "17"
    },
    "571": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "REVERT",
      "path": "17"
    },
    "572": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "573": {
      "op": "POP"
    },
    "574": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x250"
    },
    "577": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x24B"
    },
    "580": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "581": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "583": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC8A"
    },
    "586": {
      "fn": "NftTrader.getTimedOffer",
      "jump": "i",
      "offset": [
        3336,
        3703
      ],
      "op": "JUMP",
      "path": "17"
    },
    "587": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "588": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x8A3"
    },
    "591": {
      "fn": "NftTrader.getTimedOffer",
      "jump": "i",
      "offset": [
        3336,
        3703
      ],
      "op": "JUMP",
      "path": "17"
    },
    "592": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "593": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "595": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "596": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x10F"
    },
    "599": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "600": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "601": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "602": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "603": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xEA3"
    },
    "606": {
      "fn": "NftTrader.getTimedOffer",
      "jump": "i",
      "offset": [
        3336,
        3703
      ],
      "op": "JUMP",
      "path": "17"
    },
    "607": {
      "offset": [
        339,
        408
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "608": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "CALLVALUE",
      "path": "17"
    },
    "609": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "DUP1",
      "path": "17"
    },
    "610": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "611": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x26B"
    },
    "614": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "615": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "617": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "DUP1",
      "path": "17"
    },
    "618": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "REVERT",
      "path": "17"
    },
    "619": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "620": {
      "op": "POP"
    },
    "621": {
      "offset": [
        339,
        408
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x27F"
    },
    "624": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x27A"
    },
    "627": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "628": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "630": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC8A"
    },
    "633": {
      "fn": "NftTrader.getTimedOffer",
      "jump": "i",
      "offset": [
        339,
        408
      ],
      "op": "JUMP",
      "path": "17"
    },
    "634": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "635": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x918"
    },
    "638": {
      "fn": "NftTrader.getTimedOffer",
      "jump": "i",
      "offset": [
        339,
        408
      ],
      "op": "JUMP",
      "path": "17"
    },
    "639": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "640": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "642": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "643": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x10F"
    },
    "646": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP6",
      "path": "17"
    },
    "647": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP5",
      "path": "17"
    },
    "648": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "649": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "650": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "651": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "652": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xEBB"
    },
    "655": {
      "fn": "NftTrader.getTimedOffer",
      "jump": "i",
      "offset": [
        339,
        408
      ],
      "op": "JUMP",
      "path": "17"
    },
    "656": {
      "offset": [
        495,
        528
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "657": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "CALLVALUE",
      "path": "17"
    },
    "658": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "DUP1",
      "path": "17"
    },
    "659": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "660": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x29C"
    },
    "663": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "664": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "666": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "DUP1",
      "path": "17"
    },
    "667": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "REVERT",
      "path": "17"
    },
    "668": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "669": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "POP",
      "path": "17"
    },
    "670": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x2A5"
    },
    "673": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x952"
    },
    "676": {
      "fn": "NftTrader.getTimedOffer",
      "jump": "i",
      "offset": [
        495,
        528
      ],
      "op": "JUMP",
      "path": "17"
    },
    "677": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "678": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "680": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "681": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x10F"
    },
    "684": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "685": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "686": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xD4B"
    },
    "689": {
      "fn": "NftTrader.getTimedOffer",
      "jump": "i",
      "offset": [
        495,
        528
      ],
      "op": "JUMP",
      "path": "17"
    },
    "690": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "691": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "CALLVALUE",
      "path": "17"
    },
    "692": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "DUP1",
      "path": "17"
    },
    "693": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "694": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x2BE"
    },
    "697": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "698": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "700": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "DUP1",
      "path": "17"
    },
    "701": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "REVERT",
      "path": "17"
    },
    "702": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "703": {
      "op": "POP"
    },
    "704": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x138"
    },
    "707": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x2CD"
    },
    "710": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "711": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "713": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xD00"
    },
    "716": {
      "fn": "NftTrader.addTimedOffer",
      "jump": "i",
      "offset": [
        1028,
        1611
      ],
      "op": "JUMP",
      "path": "17"
    },
    "717": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "718": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x961"
    },
    "721": {
      "fn": "NftTrader.addTimedOffer",
      "jump": "i",
      "offset": [
        1028,
        1611
      ],
      "op": "JUMP",
      "path": "17"
    },
    "722": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2225,
        2685
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "723": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2225,
        2685
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x138"
    },
    "726": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2225,
        2685
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x2E0"
    },
    "729": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2225,
        2685
      ],
      "op": "CALLDATASIZE",
      "path": "17"
    },
    "730": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2225,
        2685
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "732": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2225,
        2685
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC8A"
    },
    "735": {
      "fn": "NftTrader.timedPurchase",
      "jump": "i",
      "offset": [
        2225,
        2685
      ],
      "op": "JUMP",
      "path": "17"
    },
    "736": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2225,
        2685
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "737": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2225,
        2685
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xAB6"
    },
    "740": {
      "fn": "NftTrader.timedPurchase",
      "jump": "i",
      "offset": [
        2225,
        2685
      ],
      "op": "JUMP",
      "path": "17"
    },
    "741": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5088,
        5276
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "742": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5179,
        5189
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 0,
      "value": "0x2"
    },
    "744": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5179,
        5189
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "745": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5131,
        5146
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "747": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5131,
        5146
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "748": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "750": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "752": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "754": {
      "op": "SHL"
    },
    "755": {
      "op": "SUB"
    },
    "756": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5179,
        5189
      ],
      "op": "AND",
      "path": "17"
    },
    "757": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5165,
        5175
      ],
      "op": "CALLER",
      "path": "17"
    },
    "758": {
      "branch": 34,
      "fn": "NftTrader.getBalance",
      "offset": [
        5165,
        5189
      ],
      "op": "EQ",
      "path": "17"
    },
    "759": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x31B"
    },
    "762": {
      "branch": 34,
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "763": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "765": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "766": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "770": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "772": {
      "op": "SHL"
    },
    "773": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "DUP2",
      "path": "17"
    },
    "774": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "775": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "777": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "ADD",
      "path": "17"
    },
    "778": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x312"
    },
    "781": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "782": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xDDA"
    },
    "785": {
      "fn": "NftTrader.getBalance",
      "jump": "i",
      "offset": [
        5157,
        5228
      ],
      "op": "JUMP",
      "path": "17"
    },
    "786": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "787": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "789": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "790": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "DUP1",
      "path": "17"
    },
    "791": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "792": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "SUB",
      "path": "17"
    },
    "793": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "794": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "17"
    },
    "795": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5157,
        5228
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "796": {
      "op": "POP"
    },
    "797": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5248,
        5269
      ],
      "op": "SELFBALANCE",
      "path": "17",
      "statement": 1
    },
    "798": {
      "fn": "NftTrader.getBalance",
      "offset": [
        5248,
        5269
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "799": {
      "fn": "NftTrader.getBalance",
      "jump": "o",
      "offset": [
        5088,
        5276
      ],
      "op": "JUMP",
      "path": "17"
    },
    "800": {
      "fn": "NftTrader.setOwner",
      "offset": [
        852,
        1022
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "801": {
      "fn": "NftTrader.setOwner",
      "offset": [
        935,
        945
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 2,
      "value": "0x2"
    },
    "803": {
      "fn": "NftTrader.setOwner",
      "offset": [
        935,
        945
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "804": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "806": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "808": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "810": {
      "op": "SHL"
    },
    "811": {
      "op": "SUB"
    },
    "812": {
      "fn": "NftTrader.setOwner",
      "offset": [
        935,
        945
      ],
      "op": "AND",
      "path": "17"
    },
    "813": {
      "fn": "NftTrader.setOwner",
      "offset": [
        921,
        931
      ],
      "op": "CALLER",
      "path": "17"
    },
    "814": {
      "branch": 35,
      "fn": "NftTrader.setOwner",
      "offset": [
        921,
        945
      ],
      "op": "EQ",
      "path": "17"
    },
    "815": {
      "fn": "NftTrader.setOwner",
      "offset": [
        913,
        984
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x34A"
    },
    "818": {
      "branch": 35,
      "fn": "NftTrader.setOwner",
      "offset": [
        913,
        984
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "819": {
      "fn": "NftTrader.setOwner",
      "offset": [
        913,
        984
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "821": {
      "fn": "NftTrader.setOwner",
      "offset": [
        913,
        984
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "822": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "826": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "828": {
      "op": "SHL"
    },
    "829": {
      "fn": "NftTrader.setOwner",
      "offset": [
        913,
        984
      ],
      "op": "DUP2",
      "path": "17"
    },
    "830": {
      "fn": "NftTrader.setOwner",
      "offset": [
        913,
        984
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "831": {
      "fn": "NftTrader.setOwner",
      "offset": [
        913,
        984
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "833": {
      "fn": "NftTrader.setOwner",
      "offset": [
        913,
        984
      ],
      "op": "ADD",
      "path": "17"
    },
    "834": {
      "fn": "NftTrader.setOwner",
      "offset": [
        913,
        984
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x312"
    },
    "837": {
      "fn": "NftTrader.setOwner",
      "offset": [
        913,
        984
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "838": {
      "fn": "NftTrader.setOwner",
      "offset": [
        913,
        984
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xDDA"
    },
    "841": {
      "fn": "NftTrader.setOwner",
      "jump": "i",
      "offset": [
        913,
        984
      ],
      "op": "JUMP",
      "path": "17"
    },
    "842": {
      "fn": "NftTrader.setOwner",
      "offset": [
        913,
        984
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "843": {
      "fn": "NftTrader.setOwner",
      "offset": [
        994,
        1004
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 3,
      "value": "0x2"
    },
    "845": {
      "fn": "NftTrader.setOwner",
      "offset": [
        994,
        1015
      ],
      "op": "DUP1",
      "path": "17"
    },
    "846": {
      "fn": "NftTrader.setOwner",
      "offset": [
        994,
        1015
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "847": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "849": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "851": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "853": {
      "op": "SHL"
    },
    "854": {
      "op": "SUB"
    },
    "855": {
      "op": "NOT"
    },
    "856": {
      "fn": "NftTrader.setOwner",
      "offset": [
        994,
        1015
      ],
      "op": "AND",
      "path": "17"
    },
    "857": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "859": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "861": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "863": {
      "op": "SHL"
    },
    "864": {
      "op": "SUB"
    },
    "865": {
      "fn": "NftTrader.setOwner",
      "offset": [
        994,
        1015
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "866": {
      "fn": "NftTrader.setOwner",
      "offset": [
        994,
        1015
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "867": {
      "fn": "NftTrader.setOwner",
      "offset": [
        994,
        1015
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "868": {
      "fn": "NftTrader.setOwner",
      "offset": [
        994,
        1015
      ],
      "op": "AND",
      "path": "17"
    },
    "869": {
      "fn": "NftTrader.setOwner",
      "offset": [
        994,
        1015
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "870": {
      "fn": "NftTrader.setOwner",
      "offset": [
        994,
        1015
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "871": {
      "fn": "NftTrader.setOwner",
      "offset": [
        994,
        1015
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "872": {
      "fn": "NftTrader.setOwner",
      "offset": [
        994,
        1015
      ],
      "op": "OR",
      "path": "17"
    },
    "873": {
      "fn": "NftTrader.setOwner",
      "offset": [
        994,
        1015
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "874": {
      "fn": "NftTrader.setOwner",
      "offset": [
        994,
        1015
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "875": {
      "fn": "NftTrader.setOwner",
      "jump": "o",
      "offset": [
        852,
        1022
      ],
      "op": "JUMP",
      "path": "17"
    },
    "876": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4130,
        4347
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "877": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4237,
        4247
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 4,
      "value": "0x2"
    },
    "879": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4237,
        4247
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "880": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "882": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "884": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "886": {
      "op": "SHL"
    },
    "887": {
      "op": "SUB"
    },
    "888": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4237,
        4247
      ],
      "op": "AND",
      "path": "17"
    },
    "889": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4223,
        4233
      ],
      "op": "CALLER",
      "path": "17"
    },
    "890": {
      "branch": 36,
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4223,
        4247
      ],
      "op": "EQ",
      "path": "17"
    },
    "891": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4215,
        4286
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x396"
    },
    "894": {
      "branch": 36,
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4215,
        4286
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "895": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4215,
        4286
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "897": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4215,
        4286
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "898": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "902": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "904": {
      "op": "SHL"
    },
    "905": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4215,
        4286
      ],
      "op": "DUP2",
      "path": "17"
    },
    "906": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4215,
        4286
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "907": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4215,
        4286
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "909": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4215,
        4286
      ],
      "op": "ADD",
      "path": "17"
    },
    "910": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4215,
        4286
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x312"
    },
    "913": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4215,
        4286
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "914": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4215,
        4286
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xDDA"
    },
    "917": {
      "fn": "NftTrader.deleteConstantOffer",
      "jump": "i",
      "offset": [
        4215,
        4286
      ],
      "op": "JUMP",
      "path": "17"
    },
    "918": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4215,
        4286
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "919": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "921": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "923": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "925": {
      "op": "SHL"
    },
    "926": {
      "op": "SUB"
    },
    "927": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4331
      ],
      "op": "SWAP1",
      "path": "17",
      "statement": 5
    },
    "928": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4331
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "929": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4331
      ],
      "op": "AND",
      "path": "17"
    },
    "930": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4331
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "932": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4331
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "933": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4331
      ],
      "op": "DUP2",
      "path": "17"
    },
    "934": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4331
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "935": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4317
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1"
    },
    "937": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4331
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "939": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4331
      ],
      "op": "DUP2",
      "path": "17"
    },
    "940": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4331
      ],
      "op": "DUP2",
      "path": "17"
    },
    "941": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4331
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "942": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4331
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "944": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4331
      ],
      "op": "DUP1",
      "path": "17"
    },
    "945": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4331
      ],
      "op": "DUP5",
      "path": "17"
    },
    "946": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4331
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "947": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4340
      ],
      "op": "SWAP5",
      "path": "17"
    },
    "948": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4340
      ],
      "op": "DUP5",
      "path": "17"
    },
    "949": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4340
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "950": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4340
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "951": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4340
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "952": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4340
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "953": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4340
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "954": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4340
      ],
      "op": "DUP2",
      "path": "17"
    },
    "955": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4303,
        4340
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "956": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4296,
        4340
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "957": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4296,
        4340
      ],
      "op": "DUP2",
      "path": "17"
    },
    "958": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4296,
        4340
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "959": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4296,
        4340
      ],
      "op": "ADD",
      "path": "17"
    },
    "960": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4296,
        4340
      ],
      "op": "DUP1",
      "path": "17"
    },
    "961": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4296,
        4340
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "962": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "964": {
      "op": "NOT"
    },
    "965": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4296,
        4340
      ],
      "op": "AND",
      "path": "17"
    },
    "966": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4296,
        4340
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "967": {
      "fn": "NftTrader.deleteConstantOffer",
      "offset": [
        4296,
        4340
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "968": {
      "fn": "NftTrader.deleteConstantOffer",
      "jump": "o",
      "offset": [
        4130,
        4347
      ],
      "op": "JUMP",
      "path": "17"
    },
    "969": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2008,
        2219
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "970": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2112,
        2122
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 6,
      "value": "0x2"
    },
    "972": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2112,
        2122
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "973": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "975": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "977": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "979": {
      "op": "SHL"
    },
    "980": {
      "op": "SUB"
    },
    "981": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2112,
        2122
      ],
      "op": "AND",
      "path": "17"
    },
    "982": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2098,
        2108
      ],
      "op": "CALLER",
      "path": "17"
    },
    "983": {
      "branch": 37,
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2098,
        2122
      ],
      "op": "EQ",
      "path": "17"
    },
    "984": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2090,
        2161
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x3F3"
    },
    "987": {
      "branch": 37,
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2090,
        2161
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "988": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2090,
        2161
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "990": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2090,
        2161
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "991": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "995": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "997": {
      "op": "SHL"
    },
    "998": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2090,
        2161
      ],
      "op": "DUP2",
      "path": "17"
    },
    "999": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2090,
        2161
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1000": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2090,
        2161
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "1002": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2090,
        2161
      ],
      "op": "ADD",
      "path": "17"
    },
    "1003": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2090,
        2161
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x312"
    },
    "1006": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2090,
        2161
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1007": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2090,
        2161
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xDDA"
    },
    "1010": {
      "fn": "NftTrader.deleteTimedOffer",
      "jump": "i",
      "offset": [
        2090,
        2161
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1011": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2090,
        2161
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1012": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1014": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1016": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1018": {
      "op": "SHL"
    },
    "1019": {
      "op": "SUB"
    },
    "1020": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2203
      ],
      "op": "SWAP1",
      "path": "17",
      "statement": 7
    },
    "1021": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2203
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1022": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2203
      ],
      "op": "AND",
      "path": "17"
    },
    "1023": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2189
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1025": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2203
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1026": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2203
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1027": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2203
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1028": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2203
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "1030": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2203
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1031": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2203
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1032": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2203
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1033": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2203
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1035": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2203
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1036": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2203
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1037": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2203
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "1038": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2212
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "1039": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2212
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1040": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2212
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1041": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2212
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "1042": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2212
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1043": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2212
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1044": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2212
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1045": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2212
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1046": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2178,
        2212
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "1047": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1048": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1049": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "1050": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1"
    },
    "1052": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1053": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "ADD",
      "path": "17"
    },
    "1054": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1055": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1056": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "1057": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x2"
    },
    "1059": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1060": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "ADD",
      "path": "17"
    },
    "1061": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1062": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1063": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "1064": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x3"
    },
    "1066": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1067": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "ADD",
      "path": "17"
    },
    "1068": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1069": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1070": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1071": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "1072": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "1074": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "ADD",
      "path": "17"
    },
    "1075": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1076": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1077": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1079": {
      "op": "NOT"
    },
    "1080": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "AND",
      "path": "17"
    },
    "1081": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1082": {
      "fn": "NftTrader.deleteTimedOffer",
      "offset": [
        2171,
        2212
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "1083": {
      "fn": "NftTrader.deleteTimedOffer",
      "jump": "o",
      "offset": [
        2008,
        2219
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1084": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4806,
        5082
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1085": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4865,
        4875
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 8,
      "value": "0x2"
    },
    "1087": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4865,
        4875
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1088": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1090": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1092": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1094": {
      "op": "SHL"
    },
    "1095": {
      "op": "SUB"
    },
    "1096": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4865,
        4875
      ],
      "op": "AND",
      "path": "17"
    },
    "1097": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4851,
        4861
      ],
      "op": "CALLER",
      "path": "17"
    },
    "1098": {
      "branch": 38,
      "fn": "NftTrader.withdraw",
      "offset": [
        4851,
        4875
      ],
      "op": "EQ",
      "path": "17"
    },
    "1099": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4843,
        4914
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x466"
    },
    "1102": {
      "branch": 38,
      "fn": "NftTrader.withdraw",
      "offset": [
        4843,
        4914
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1103": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4843,
        4914
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1105": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4843,
        4914
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1106": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1110": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1112": {
      "op": "SHL"
    },
    "1113": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4843,
        4914
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1114": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4843,
        4914
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1115": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4843,
        4914
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "1117": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4843,
        4914
      ],
      "op": "ADD",
      "path": "17"
    },
    "1118": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4843,
        4914
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x312"
    },
    "1121": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4843,
        4914
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1122": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4843,
        4914
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xDDA"
    },
    "1125": {
      "fn": "NftTrader.withdraw",
      "jump": "i",
      "offset": [
        4843,
        4914
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1126": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4843,
        4914
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1127": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5000
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x2"
    },
    "1129": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5000
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1130": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1132": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1133": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4941,
        4962
      ],
      "op": "SELFBALANCE",
      "path": "17"
    },
    "1134": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4941,
        4962
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1135": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4924,
        4938
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1137": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4924,
        4938
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1138": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1140": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1142": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1144": {
      "op": "SHL"
    },
    "1145": {
      "op": "SUB"
    },
    "1146": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5000
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1147": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5000
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1148": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5000
      ],
      "op": "AND",
      "path": "17"
    },
    "1149": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5000
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1150": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4941,
        4962
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1151": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4941,
        4962
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1152": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x488"
    },
    "1155": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1156": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xD48"
    },
    "1159": {
      "fn": "NftTrader.withdraw",
      "jump": "i",
      "offset": [
        4990,
        5025
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1160": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1161": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1163": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1165": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1166": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1167": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1168": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "SUB",
      "path": "17"
    },
    "1169": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1170": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "DUP6",
      "path": "17"
    },
    "1171": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "DUP8",
      "path": "17"
    },
    "1172": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "GAS",
      "path": "17"
    },
    "1173": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "CALL",
      "path": "17"
    },
    "1174": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "1175": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "POP",
      "path": "17"
    },
    "1176": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "POP",
      "path": "17"
    },
    "1177": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "POP",
      "path": "17"
    },
    "1178": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "1179": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1180": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1182": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1183": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "EQ",
      "path": "17"
    },
    "1184": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x4C5"
    },
    "1187": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1188": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1190": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1191": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1192": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "POP",
      "path": "17"
    },
    "1193": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1F"
    },
    "1195": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "NOT",
      "path": "17"
    },
    "1196": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x3F"
    },
    "1198": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "1199": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "ADD",
      "path": "17"
    },
    "1200": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "AND",
      "path": "17"
    },
    "1201": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1202": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "ADD",
      "path": "17"
    },
    "1203": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1205": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1206": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "1207": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1208": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1209": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "1210": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1212": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "1214": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "DUP5",
      "path": "17"
    },
    "1215": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "ADD",
      "path": "17"
    },
    "1216": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "RETURNDATACOPY",
      "path": "17"
    },
    "1217": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x4CA"
    },
    "1220": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1221": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1222": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x60"
    },
    "1224": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1225": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "POP",
      "path": "17"
    },
    "1226": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1227": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4990,
        5025
      ],
      "op": "POP",
      "path": "17"
    },
    "1228": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4972,
        5025
      ],
      "op": "POP",
      "path": "17"
    },
    "1229": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4972,
        5025
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1230": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4972,
        5025
      ],
      "op": "POP",
      "path": "17"
    },
    "1231": {
      "branch": 39,
      "fn": "NftTrader.withdraw",
      "offset": [
        5043,
        5050
      ],
      "op": "DUP1",
      "path": "17",
      "statement": 9
    },
    "1232": {
      "fn": "NftTrader.withdraw",
      "offset": [
        5035,
        5075
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x4EB"
    },
    "1235": {
      "branch": 39,
      "fn": "NftTrader.withdraw",
      "offset": [
        5035,
        5075
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1236": {
      "fn": "NftTrader.withdraw",
      "offset": [
        5035,
        5075
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1238": {
      "fn": "NftTrader.withdraw",
      "offset": [
        5035,
        5075
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1239": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1243": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1245": {
      "op": "SHL"
    },
    "1246": {
      "fn": "NftTrader.withdraw",
      "offset": [
        5035,
        5075
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1247": {
      "fn": "NftTrader.withdraw",
      "offset": [
        5035,
        5075
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1248": {
      "fn": "NftTrader.withdraw",
      "offset": [
        5035,
        5075
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "1250": {
      "fn": "NftTrader.withdraw",
      "offset": [
        5035,
        5075
      ],
      "op": "ADD",
      "path": "17"
    },
    "1251": {
      "fn": "NftTrader.withdraw",
      "offset": [
        5035,
        5075
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x312"
    },
    "1254": {
      "fn": "NftTrader.withdraw",
      "offset": [
        5035,
        5075
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1255": {
      "fn": "NftTrader.withdraw",
      "offset": [
        5035,
        5075
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xDAC"
    },
    "1258": {
      "fn": "NftTrader.withdraw",
      "jump": "i",
      "offset": [
        5035,
        5075
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1259": {
      "fn": "NftTrader.withdraw",
      "offset": [
        5035,
        5075
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1260": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4806,
        5082
      ],
      "op": "POP",
      "path": "17"
    },
    "1261": {
      "fn": "NftTrader.withdraw",
      "offset": [
        4806,
        5082
      ],
      "op": "POP",
      "path": "17"
    },
    "1262": {
      "fn": "NftTrader.withdraw",
      "jump": "o",
      "offset": [
        4806,
        5082
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1263": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3709,
        4124
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1264": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3858,
        3868
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 10,
      "value": "0x2"
    },
    "1266": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3858,
        3868
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1267": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1269": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1271": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1273": {
      "op": "SHL"
    },
    "1274": {
      "op": "SUB"
    },
    "1275": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3858,
        3868
      ],
      "op": "AND",
      "path": "17"
    },
    "1276": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3844,
        3854
      ],
      "op": "CALLER",
      "path": "17"
    },
    "1277": {
      "branch": 40,
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3844,
        3868
      ],
      "op": "EQ",
      "path": "17"
    },
    "1278": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3836,
        3907
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x519"
    },
    "1281": {
      "branch": 40,
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3836,
        3907
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1282": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3836,
        3907
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1284": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3836,
        3907
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1285": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1289": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1291": {
      "op": "SHL"
    },
    "1292": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3836,
        3907
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1293": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3836,
        3907
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1294": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3836,
        3907
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "1296": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3836,
        3907
      ],
      "op": "ADD",
      "path": "17"
    },
    "1297": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3836,
        3907
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x312"
    },
    "1300": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3836,
        3907
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1301": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3836,
        3907
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xDDA"
    },
    "1304": {
      "fn": "NftTrader.addConstantOffer",
      "jump": "i",
      "offset": [
        3836,
        3907
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1305": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3836,
        3907
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1306": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3997,
        4007
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 11,
      "value": "0x2"
    },
    "1308": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3997,
        4007
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1309": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1311": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1312": {
      "op": "PUSH4",
      "value": "0x31A9108F"
    },
    "1317": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "1319": {
      "op": "SHL"
    },
    "1320": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1321": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1322": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3940,
        3952
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1323": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3940,
        3952
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1324": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1326": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1328": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1330": {
      "op": "SHL"
    },
    "1331": {
      "op": "SUB"
    },
    "1332": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3997,
        4007
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1333": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3997,
        4007
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1334": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3997,
        4007
      ],
      "op": "AND",
      "path": "17"
    },
    "1335": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3997,
        4007
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1336": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3984
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1337": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3984
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1338": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3984
      ],
      "op": "AND",
      "path": "17"
    },
    "1339": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3984
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1340": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3984
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x6352211E"
    },
    "1345": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3984
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1346": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x54F"
    },
    "1349": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1350": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3985,
        3992
      ],
      "op": "DUP7",
      "path": "17"
    },
    "1351": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3985,
        3992
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1352": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "1354": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "ADD",
      "path": "17"
    },
    "1355": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xE8A"
    },
    "1358": {
      "fn": "NftTrader.addConstantOffer",
      "jump": "i",
      "offset": [
        3971,
        3993
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1359": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1360": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "1362": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1364": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1365": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1366": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1367": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "SUB",
      "path": "17"
    },
    "1368": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1369": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "DUP7",
      "path": "17"
    },
    "1370": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1371": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "EXTCODESIZE",
      "path": "17"
    },
    "1372": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "1373": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1374": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "1375": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x567"
    },
    "1378": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1379": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1381": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1382": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "REVERT",
      "path": "17"
    },
    "1383": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1384": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "POP",
      "path": "17"
    },
    "1385": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "GAS",
      "path": "17"
    },
    "1386": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "STATICCALL",
      "path": "17"
    },
    "1387": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "1388": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1389": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "1390": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x57B"
    },
    "1393": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1394": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "1395": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1397": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1398": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "RETURNDATACOPY",
      "path": "17"
    },
    "1399": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "1400": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1402": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "REVERT",
      "path": "17"
    },
    "1403": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1404": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "POP",
      "path": "17"
    },
    "1405": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "POP",
      "path": "17"
    },
    "1406": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "POP",
      "path": "17"
    },
    "1407": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "POP",
      "path": "17"
    },
    "1408": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1410": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1411": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "1412": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1F"
    },
    "1414": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "NOT",
      "path": "17"
    },
    "1415": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1F"
    },
    "1417": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1418": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "ADD",
      "path": "17"
    },
    "1419": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "AND",
      "path": "17"
    },
    "1420": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1421": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "ADD",
      "path": "17"
    },
    "1422": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1423": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1425": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1426": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "POP",
      "path": "17"
    },
    "1427": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1428": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "ADD",
      "path": "17"
    },
    "1429": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1430": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x59F"
    },
    "1433": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1434": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1435": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC52"
    },
    "1438": {
      "fn": "NftTrader.addConstantOffer",
      "jump": "i",
      "offset": [
        3971,
        3993
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1439": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        3993
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1440": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1442": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1444": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1446": {
      "op": "SHL"
    },
    "1447": {
      "op": "SUB"
    },
    "1448": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        4007
      ],
      "op": "AND",
      "path": "17"
    },
    "1449": {
      "branch": 41,
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3971,
        4007
      ],
      "op": "EQ",
      "path": "17"
    },
    "1450": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3963,
        4040
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x5C5"
    },
    "1453": {
      "branch": 41,
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3963,
        4040
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1454": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3963,
        4040
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1456": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3963,
        4040
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1457": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1461": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1463": {
      "op": "SHL"
    },
    "1464": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3963,
        4040
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1465": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3963,
        4040
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1466": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3963,
        4040
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "1468": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3963,
        4040
      ],
      "op": "ADD",
      "path": "17"
    },
    "1469": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3963,
        4040
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x312"
    },
    "1472": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3963,
        4040
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1473": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3963,
        4040
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xE1C"
    },
    "1476": {
      "fn": "NftTrader.addConstantOffer",
      "jump": "i",
      "offset": [
        3963,
        4040
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1477": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        3963,
        4040
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1478": {
      "op": "POP"
    },
    "1479": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 12,
      "value": "0x40"
    },
    "1481": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1482": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1483": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1484": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1485": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "ADD",
      "path": "17"
    },
    "1486": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1487": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1488": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "1489": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "DUP5",
      "path": "17"
    },
    "1490": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1491": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4112,
        4116
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1"
    },
    "1493": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "1495": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1496": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "DUP7",
      "path": "17"
    },
    "1497": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "ADD",
      "path": "17"
    },
    "1498": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1499": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1500": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4091,
        4117
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1501": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1503": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1505": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1507": {
      "op": "SHL"
    },
    "1508": {
      "op": "SUB"
    },
    "1509": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4079
      ],
      "op": "SWAP6",
      "path": "17"
    },
    "1510": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4079
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1511": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4079
      ],
      "op": "SWAP6",
      "path": "17"
    },
    "1512": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4079
      ],
      "op": "AND",
      "path": "17"
    },
    "1513": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1515": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4079
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1516": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4079
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1517": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4079
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1518": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4079
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1519": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4079
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1520": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4079
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1521": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4079
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1522": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4079
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1523": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4079
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "1524": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4088
      ],
      "op": "SWAP5",
      "path": "17"
    },
    "1525": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4088
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1526": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4088
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1527": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4088
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "1528": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4088
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1529": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4088
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1530": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4088
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1531": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4088
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "1532": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "1533": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1534": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1535": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "1536": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1537": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1538": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1539": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "ADD",
      "path": "17"
    },
    "1540": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1541": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1542": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1544": {
      "op": "NOT"
    },
    "1545": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "AND",
      "path": "17"
    },
    "1546": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1547": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "1548": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "1549": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1550": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1551": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1552": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "OR",
      "path": "17"
    },
    "1553": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1554": {
      "fn": "NftTrader.addConstantOffer",
      "offset": [
        4051,
        4117
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "1555": {
      "fn": "NftTrader.addConstantOffer",
      "jump": "o",
      "offset": [
        3709,
        4124
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1556": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1617,
        2002
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1557": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1773,
        1783
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 13,
      "value": "0x2"
    },
    "1559": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1773,
        1783
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1560": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1562": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1564": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1566": {
      "op": "SHL"
    },
    "1567": {
      "op": "SUB"
    },
    "1568": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1773,
        1783
      ],
      "op": "AND",
      "path": "17"
    },
    "1569": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1759,
        1769
      ],
      "op": "CALLER",
      "path": "17"
    },
    "1570": {
      "branch": 42,
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1759,
        1783
      ],
      "op": "EQ",
      "path": "17"
    },
    "1571": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1751,
        1822
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x63E"
    },
    "1574": {
      "branch": 42,
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1751,
        1822
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1575": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1751,
        1822
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1577": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1751,
        1822
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1578": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1582": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1584": {
      "op": "SHL"
    },
    "1585": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1751,
        1822
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1586": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1751,
        1822
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1587": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1751,
        1822
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "1589": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1751,
        1822
      ],
      "op": "ADD",
      "path": "17"
    },
    "1590": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1751,
        1822
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x312"
    },
    "1593": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1751,
        1822
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1594": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1751,
        1822
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xDDA"
    },
    "1597": {
      "fn": "NftTrader.offsetTimedOffer",
      "jump": "i",
      "offset": [
        1751,
        1822
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1598": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1751,
        1822
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1599": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1601": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1603": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1605": {
      "op": "SHL"
    },
    "1606": {
      "op": "SUB"
    },
    "1607": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1885
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1608": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1885
      ],
      "op": "AND",
      "path": "17"
    },
    "1609": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1833,
        1857
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1611": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1885
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1612": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1885
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1613": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1885
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1614": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1885
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "1616": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1885
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1617": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1885
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1618": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1885
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1619": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1885
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1621": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1885
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1622": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1885
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1623": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1885
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "1624": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1894
      ],
      "op": "DUP5",
      "path": "17"
    },
    "1625": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1894
      ],
      "op": "DUP5",
      "path": "17"
    },
    "1626": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1894
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1627": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1894
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1628": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1894
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1629": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1894
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1630": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1894
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1631": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1860,
        1894
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "1632": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1912,
        1923
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 14,
      "value": "0x4"
    },
    "1634": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1912,
        1923
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1635": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1912,
        1923
      ],
      "op": "ADD",
      "path": "17"
    },
    "1636": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1912,
        1923
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1637": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1912,
        1923
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0xFF"
    },
    "1639": {
      "branch": 43,
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1912,
        1923
      ],
      "op": "AND",
      "path": "17"
    },
    "1640": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1904,
        1943
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x683"
    },
    "1643": {
      "branch": 43,
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1904,
        1943
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1644": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1904,
        1943
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1646": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1904,
        1943
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1647": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1651": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1653": {
      "op": "SHL"
    },
    "1654": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1904,
        1943
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1655": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1904,
        1943
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1656": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1904,
        1943
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "1658": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1904,
        1943
      ],
      "op": "ADD",
      "path": "17"
    },
    "1659": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1904,
        1943
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x312"
    },
    "1662": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1904,
        1943
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1663": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1904,
        1943
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xD83"
    },
    "1666": {
      "fn": "NftTrader.offsetTimedOffer",
      "jump": "i",
      "offset": [
        1904,
        1943
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1667": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1904,
        1943
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1668": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1981,
        1994
      ],
      "op": "DUP4",
      "path": "17",
      "statement": 15
    },
    "1669": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1954,
        1959
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1670": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1954,
        1969
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1672": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1954,
        1969
      ],
      "op": "ADD",
      "path": "17"
    },
    "1673": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1954,
        1969
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1675": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1954,
        1995
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1676": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1954,
        1995
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1677": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1954,
        1995
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1678": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1954,
        1995
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x697"
    },
    "1681": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1954,
        1995
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1682": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1954,
        1995
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1683": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1954,
        1995
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xEE0"
    },
    "1686": {
      "fn": "NftTrader.offsetTimedOffer",
      "jump": "i",
      "offset": [
        1954,
        1995
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1687": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1954,
        1995
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1688": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1954,
        1995
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1689": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1954,
        1995
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1690": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        1954,
        1995
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "1691": {
      "op": "POP"
    },
    "1692": {
      "op": "POP"
    },
    "1693": {
      "op": "POP"
    },
    "1694": {
      "op": "POP"
    },
    "1695": {
      "op": "POP"
    },
    "1696": {
      "op": "POP"
    },
    "1697": {
      "fn": "NftTrader.offsetTimedOffer",
      "jump": "o",
      "offset": [
        1617,
        2002
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1698": {
      "offset": [
        414,
        489
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1699": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1"
    },
    "1701": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "1703": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1704": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1705": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1706": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1708": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "1709": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "DUP5",
      "path": "17"
    },
    "1710": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1711": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1713": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1714": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "DUP6",
      "path": "17"
    },
    "1715": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "1716": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1717": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1718": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1719": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1720": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1721": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1722": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1723": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "1724": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1725": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1726": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1727": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "ADD",
      "path": "17"
    },
    "1728": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1729": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0xFF"
    },
    "1731": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "AND",
      "path": "17"
    },
    "1732": {
      "fn": "NftTrader.offsetTimedOffer",
      "offset": [
        414,
        489
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1733": {
      "fn": "NftTrader.offsetTimedOffer",
      "jump": "o",
      "offset": [
        414,
        489
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1734": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1735": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1737": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1739": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1741": {
      "op": "SHL"
    },
    "1742": {
      "op": "SUB"
    },
    "1743": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2870
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1744": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2870
      ],
      "op": "AND",
      "path": "17"
    },
    "1745": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2783,
        2803
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1747": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2870
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1748": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2870
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1749": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2870
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1750": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2870
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "1752": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2870
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1753": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2870
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1754": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2870
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1755": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2870
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1757": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2870
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1758": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2870
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1759": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2870
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "1760": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2879
      ],
      "op": "DUP5",
      "path": "17"
    },
    "1761": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2879
      ],
      "op": "DUP5",
      "path": "17"
    },
    "1762": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2879
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1763": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2879
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1764": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2879
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1765": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2879
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1766": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2879
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1767": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2845,
        2879
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "1768": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1769": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1770": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0xA0"
    },
    "1772": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1773": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "ADD",
      "path": "17"
    },
    "1774": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1775": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1776": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1777": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1778": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1779": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1780": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1"
    },
    "1782": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1783": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "ADD",
      "path": "17"
    },
    "1784": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1785": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "1786": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1787": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "ADD",
      "path": "17"
    },
    "1788": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "1789": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1790": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "1791": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1792": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x2"
    },
    "1794": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1795": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "ADD",
      "path": "17"
    },
    "1796": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1797": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1798": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1799": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "ADD",
      "path": "17"
    },
    "1800": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1801": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1802": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1803": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1804": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x3"
    },
    "1806": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1807": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "ADD",
      "path": "17"
    },
    "1808": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1809": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x60"
    },
    "1811": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1812": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "ADD",
      "path": "17"
    },
    "1813": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1814": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "1816": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "ADD",
      "path": "17"
    },
    "1817": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1818": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0xFF"
    },
    "1820": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "AND",
      "path": "17"
    },
    "1821": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "1822": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1823": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "1824": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x80"
    },
    "1826": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1827": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "ADD",
      "path": "17"
    },
    "1828": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2819,
        2879
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1829": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2889,
        3324
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x77C"
    },
    "1832": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2889,
        3324
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1833": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2920,
        2938
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1835": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2941,
        3042
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x744"
    },
    "1838": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2971,
        3017
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x73B"
    },
    "1841": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2984,
        2999
      ],
      "op": "TIMESTAMP",
      "path": "17"
    },
    "1842": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3001,
        3006
      ],
      "op": "DUP5",
      "path": "17"
    },
    "1843": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3001,
        3016
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1845": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3001,
        3016
      ],
      "op": "ADD",
      "path": "17"
    },
    "1846": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3001,
        3016
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1847": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2971,
        2983
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC10"
    },
    "1850": {
      "fn": "NftTrader.getTimedPrice",
      "jump": "i",
      "offset": [
        2971,
        3017
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1851": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2971,
        3017
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1852": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3019,
        3028
      ],
      "op": "PUSH3",
      "path": "17",
      "value": "0x15180"
    },
    "1856": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2941,
        2953
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC23"
    },
    "1859": {
      "fn": "NftTrader.getTimedPrice",
      "jump": "i",
      "offset": [
        2941,
        3042
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1860": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2941,
        3042
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1861": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2920,
        3042
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1862": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2920,
        3042
      ],
      "op": "POP",
      "path": "17"
    },
    "1863": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3056,
        3079
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1865": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3082,
        3188
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x763"
    },
    "1868": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3112,
        3117
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1869": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3112,
        3126
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x60"
    },
    "1871": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3112,
        3126
      ],
      "op": "ADD",
      "path": "17"
    },
    "1872": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3112,
        3126
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1873": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3128,
        3174
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x75E"
    },
    "1876": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3141,
        3151
      ],
      "op": "DUP5",
      "path": "17"
    },
    "1877": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3153,
        3158
      ],
      "op": "DUP7",
      "path": "17"
    },
    "1878": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3153,
        3173
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "1880": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3153,
        3173
      ],
      "op": "ADD",
      "path": "17"
    },
    "1881": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3153,
        3173
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1882": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3128,
        3140
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC2F"
    },
    "1885": {
      "fn": "NftTrader.getTimedPrice",
      "jump": "i",
      "offset": [
        3128,
        3174
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1886": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3128,
        3174
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1887": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3082,
        3094
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC10"
    },
    "1890": {
      "fn": "NftTrader.getTimedPrice",
      "jump": "i",
      "offset": [
        3082,
        3188
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1891": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3082,
        3188
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1892": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3056,
        3188
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1893": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3056,
        3188
      ],
      "op": "POP",
      "path": "17"
    },
    "1894": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3217,
        3258
      ],
      "op": "PUSH2",
      "path": "17",
      "statement": 16,
      "value": "0x773"
    },
    "1897": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3226,
        3231
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1898": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3226,
        3240
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1900": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3226,
        3240
      ],
      "op": "ADD",
      "path": "17"
    },
    "1901": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3226,
        3240
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1902": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3242,
        3257
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1903": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3217,
        3225
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC3B"
    },
    "1906": {
      "fn": "NftTrader.getTimedPrice",
      "jump": "i",
      "offset": [
        3217,
        3258
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1907": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3217,
        3258
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1908": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3202,
        3258
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "1909": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3202,
        3258
      ],
      "op": "POP",
      "path": "17"
    },
    "1910": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2889,
        3324
      ],
      "op": "POP",
      "path": "17"
    },
    "1911": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2889,
        3324
      ],
      "op": "POP",
      "path": "17"
    },
    "1912": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2889,
        3324
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x781"
    },
    "1915": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2889,
        3324
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1916": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2889,
        3324
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1917": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3312,
        3313
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 17,
      "value": "0x0"
    },
    "1919": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3297,
        3313
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1920": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        3297,
        3313
      ],
      "op": "POP",
      "path": "17"
    },
    "1921": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2889,
        3324
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1922": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "POP",
      "path": "17"
    },
    "1923": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "1924": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1925": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "POP",
      "path": "17"
    },
    "1926": {
      "fn": "NftTrader.getTimedPrice",
      "offset": [
        2691,
        3330
      ],
      "op": "POP",
      "path": "17"
    },
    "1927": {
      "fn": "NftTrader.getTimedPrice",
      "jump": "o",
      "offset": [
        2691,
        3330
      ],
      "op": "JUMP",
      "path": "17"
    },
    "1928": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4353,
        4800
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "1929": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1931": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1933": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1935": {
      "op": "SHL"
    },
    "1936": {
      "op": "SUB"
    },
    "1937": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4500
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1938": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4500
      ],
      "op": "AND",
      "path": "17"
    },
    "1939": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4469
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "1941": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4500
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1942": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4500
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1943": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4500
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1944": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4486
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1"
    },
    "1946": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4500
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "1948": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4500
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1949": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4500
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1950": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4500
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1951": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4500
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1953": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4500
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1954": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4500
      ],
      "op": "DUP5",
      "path": "17"
    },
    "1955": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4500
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "1956": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4509
      ],
      "op": "DUP6",
      "path": "17"
    },
    "1957": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4509
      ],
      "op": "DUP6",
      "path": "17"
    },
    "1958": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4509
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1959": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4509
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1960": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4509
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1961": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4509
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "1962": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4509
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1963": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4509
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1964": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4472,
        4509
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "1965": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "DUP4",
      "path": "17"
    },
    "1966": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1967": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1968": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "DUP6",
      "path": "17"
    },
    "1969": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "ADD",
      "path": "17"
    },
    "1970": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1971": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "SWAP5",
      "path": "17"
    },
    "1972": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1973": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "DUP1",
      "path": "17"
    },
    "1974": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1975": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "DUP5",
      "path": "17"
    },
    "1976": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1977": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1978": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "1979": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "ADD",
      "path": "17"
    },
    "1980": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "1981": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0xFF"
    },
    "1983": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "AND",
      "path": "17"
    },
    "1984": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "1985": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "1986": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1987": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "DUP3",
      "path": "17"
    },
    "1988": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "ADD",
      "path": "17"
    },
    "1989": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "DUP2",
      "path": "17"
    },
    "1990": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "1991": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4443,
        4509
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "1992": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4519,
        4558
      ],
      "op": "PUSH2",
      "path": "17",
      "statement": 18,
      "value": "0x7E3"
    },
    "1995": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4519,
        4558
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "1996": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4519,
        4558
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "1998": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4519,
        4558
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "1999": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2003": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2005": {
      "op": "SHL"
    },
    "2006": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4519,
        4558
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2007": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4519,
        4558
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2008": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4519,
        4558
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "2010": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4519,
        4558
      ],
      "op": "ADD",
      "path": "17"
    },
    "2011": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4519,
        4558
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x312"
    },
    "2014": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4519,
        4558
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2015": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4519,
        4558
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xD83"
    },
    "2018": {
      "fn": "NftTrader.constantPurchase",
      "jump": "i",
      "offset": [
        4519,
        4558
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2019": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4519,
        4558
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2020": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4589,
        4600
      ],
      "op": "DUP1",
      "path": "17",
      "statement": 19
    },
    "2021": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4589,
        4600
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2022": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4576,
        4585
      ],
      "op": "CALLVALUE",
      "path": "17"
    },
    "2023": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4576,
        4600
      ],
      "op": "LT",
      "path": "17"
    },
    "2024": {
      "branch": 44,
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4576,
        4600
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2025": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4568,
        4628
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x804"
    },
    "2028": {
      "branch": 44,
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4568,
        4628
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "2029": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4568,
        4628
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2031": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4568,
        4628
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2032": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2036": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2038": {
      "op": "SHL"
    },
    "2039": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4568,
        4628
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2040": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4568,
        4628
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2041": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4568,
        4628
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "2043": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4568,
        4628
      ],
      "op": "ADD",
      "path": "17"
    },
    "2044": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4568,
        4628
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x312"
    },
    "2047": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4568,
        4628
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2048": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4568,
        4628
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xE53"
    },
    "2051": {
      "fn": "NftTrader.constantPurchase",
      "jump": "i",
      "offset": [
        4568,
        4628
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2052": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4568,
        4628
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2053": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4707,
        4717
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 20,
      "value": "0x2"
    },
    "2055": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4707,
        4717
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2056": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2058": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2059": {
      "op": "PUSH4",
      "value": "0x21421707"
    },
    "2064": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "2066": {
      "op": "SHL"
    },
    "2067": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2068": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2069": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4661,
        4673
      ],
      "op": "DUP5",
      "path": "17"
    },
    "2070": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4661,
        4673
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2071": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2073": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2075": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2077": {
      "op": "SHL"
    },
    "2078": {
      "op": "SUB"
    },
    "2079": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4706
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2080": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4706
      ],
      "op": "DUP5",
      "path": "17"
    },
    "2081": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4706
      ],
      "op": "AND",
      "path": "17"
    },
    "2082": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4706
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2083": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4706
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x42842E0E"
    },
    "2088": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4706
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2089": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x83A"
    },
    "2092": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2093": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4707,
        4717
      ],
      "op": "AND",
      "path": "17"
    },
    "2094": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4707,
        4717
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2095": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4719,
        4729
      ],
      "op": "CALLER",
      "path": "17"
    },
    "2096": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4719,
        4729
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2097": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4731,
        4738
      ],
      "op": "DUP9",
      "path": "17"
    },
    "2098": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4731,
        4738
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2099": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "2101": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "ADD",
      "path": "17"
    },
    "2102": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xD5F"
    },
    "2105": {
      "fn": "NftTrader.constantPurchase",
      "jump": "i",
      "offset": [
        4684,
        4739
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2106": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2107": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "2109": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2111": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2112": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2113": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2114": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "SUB",
      "path": "17"
    },
    "2115": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2116": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "2118": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "DUP8",
      "path": "17"
    },
    "2119": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2120": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "EXTCODESIZE",
      "path": "17"
    },
    "2121": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2122": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2123": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2124": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x854"
    },
    "2127": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "2128": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "2130": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2131": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "REVERT",
      "path": "17"
    },
    "2132": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2133": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "POP",
      "path": "17"
    },
    "2134": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "GAS",
      "path": "17"
    },
    "2135": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "CALL",
      "path": "17"
    },
    "2136": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2137": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2138": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2139": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x868"
    },
    "2142": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "2143": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "2144": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "2146": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2147": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "RETURNDATACOPY",
      "path": "17"
    },
    "2148": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "2149": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "2151": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "REVERT",
      "path": "17"
    },
    "2152": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4684,
        4739
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2153": {
      "op": "POP"
    },
    "2154": {
      "op": "POP"
    },
    "2155": {
      "op": "POP"
    },
    "2156": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2158": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2160": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2162": {
      "op": "SHL"
    },
    "2163": {
      "op": "SUB"
    },
    "2164": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4784
      ],
      "op": "SWAP1",
      "path": "17",
      "statement": 21
    },
    "2165": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4784
      ],
      "op": "SWAP5",
      "path": "17"
    },
    "2166": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4784
      ],
      "op": "AND",
      "path": "17"
    },
    "2167": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4784
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "2169": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4784
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2170": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4784
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2171": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4784
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2172": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4770
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1"
    },
    "2174": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4784
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "2176": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4784
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2177": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4784
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2178": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4784
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2179": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4784
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2181": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4784
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2182": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4784
      ],
      "op": "DUP5",
      "path": "17"
    },
    "2183": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4784
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "2184": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4793
      ],
      "op": "SWAP7",
      "path": "17"
    },
    "2185": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4793
      ],
      "op": "DUP5",
      "path": "17"
    },
    "2186": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4793
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2187": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4793
      ],
      "op": "SWAP6",
      "path": "17"
    },
    "2188": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4793
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2189": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4793
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2190": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4793
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "2191": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4793
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2192": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4756,
        4793
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "2193": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4749,
        4793
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2194": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4749,
        4793
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2195": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4749,
        4793
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "2196": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4749,
        4793
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2197": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4749,
        4793
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2198": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4749,
        4793
      ],
      "op": "ADD",
      "path": "17"
    },
    "2199": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4749,
        4793
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2200": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4749,
        4793
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2201": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2203": {
      "op": "NOT"
    },
    "2204": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4749,
        4793
      ],
      "op": "AND",
      "path": "17"
    },
    "2205": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4749,
        4793
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2206": {
      "fn": "NftTrader.constantPurchase",
      "offset": [
        4749,
        4793
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "2207": {
      "op": "POP"
    },
    "2208": {
      "op": "POP"
    },
    "2209": {
      "op": "POP"
    },
    "2210": {
      "fn": "NftTrader.constantPurchase",
      "jump": "o",
      "offset": [
        4353,
        4800
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2211": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2212": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2214": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2216": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2218": {
      "op": "SHL"
    },
    "2219": {
      "op": "SUB"
    },
    "2220": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3562
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2221": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3562
      ],
      "op": "AND",
      "path": "17"
    },
    "2222": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3428,
        3444
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "2224": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3562
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2225": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3562
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2226": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3562
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2227": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3562
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "2229": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3562
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2230": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3562
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2231": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3562
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2232": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3562
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2234": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3562
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2235": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3562
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2236": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3562
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "2237": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3571
      ],
      "op": "DUP5",
      "path": "17"
    },
    "2238": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3571
      ],
      "op": "DUP5",
      "path": "17"
    },
    "2239": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3571
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2240": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3571
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2241": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3571
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2242": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3571
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2243": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3571
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2244": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3537,
        3571
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "2245": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2246": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2247": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0xA0"
    },
    "2249": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2250": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "ADD",
      "path": "17"
    },
    "2251": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2252": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2253": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2254": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2255": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2256": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2257": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1"
    },
    "2259": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2260": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "ADD",
      "path": "17"
    },
    "2261": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2262": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "2263": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2264": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "ADD",
      "path": "17"
    },
    "2265": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "2266": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2267": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "2268": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2269": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x2"
    },
    "2271": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2272": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "ADD",
      "path": "17"
    },
    "2273": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2274": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2275": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2276": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "ADD",
      "path": "17"
    },
    "2277": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2278": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2279": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2280": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x3"
    },
    "2282": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2283": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "ADD",
      "path": "17"
    },
    "2284": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2285": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x60"
    },
    "2287": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "DUP5",
      "path": "17"
    },
    "2288": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "ADD",
      "path": "17"
    },
    "2289": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2290": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "2292": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "ADD",
      "path": "17"
    },
    "2293": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2294": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0xFF"
    },
    "2296": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "AND",
      "path": "17"
    },
    "2297": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2298": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2299": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x80"
    },
    "2301": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2302": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "ADD",
      "path": "17"
    },
    "2303": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2304": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2305": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2306": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2307": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3511,
        3571
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2308": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3428,
        3444
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2309": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3660,
        3696
      ],
      "op": "PUSH2",
      "path": "17",
      "statement": 22,
      "value": "0x90E"
    },
    "2312": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3549,
        3561
      ],
      "op": "DUP7",
      "path": "17"
    },
    "2313": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3563,
        3570
      ],
      "op": "DUP7",
      "path": "17"
    },
    "2314": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3660,
        3673
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x6C6"
    },
    "2317": {
      "fn": "NftTrader.getTimedOffer",
      "jump": "i",
      "offset": [
        3660,
        3696
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2318": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3660,
        3696
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2319": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3645,
        3696
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2320": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3645,
        3696
      ],
      "op": "POP",
      "path": "17"
    },
    "2321": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "POP",
      "path": "17"
    },
    "2322": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2323": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "POP",
      "path": "17"
    },
    "2324": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2325": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "POP",
      "path": "17"
    },
    "2326": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        3336,
        3703
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2327": {
      "fn": "NftTrader.getTimedOffer",
      "jump": "o",
      "offset": [
        3336,
        3703
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2328": {
      "offset": [
        339,
        408
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2329": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "2331": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "2333": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2334": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2335": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2336": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2337": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2338": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2339": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2341": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2342": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2343": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "2344": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2345": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "2346": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2347": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2348": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2349": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2350": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "2351": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2352": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2353": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1"
    },
    "2355": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2356": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "ADD",
      "path": "17"
    },
    "2357": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2358": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x2"
    },
    "2360": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2361": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "ADD",
      "path": "17"
    },
    "2362": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2363": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x3"
    },
    "2365": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "DUP5",
      "path": "17"
    },
    "2366": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "ADD",
      "path": "17"
    },
    "2367": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2368": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "2370": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2371": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP5",
      "path": "17"
    },
    "2372": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "ADD",
      "path": "17"
    },
    "2373": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2374": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2375": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "2376": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2377": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2378": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2379": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2380": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2381": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0xFF"
    },
    "2383": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "AND",
      "path": "17"
    },
    "2384": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        339,
        408
      ],
      "op": "DUP6",
      "path": "17"
    },
    "2385": {
      "fn": "NftTrader.getTimedOffer",
      "jump": "o",
      "offset": [
        339,
        408
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2386": {
      "offset": [
        495,
        528
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2387": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x2"
    },
    "2389": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2390": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2392": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2394": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2396": {
      "op": "SHL"
    },
    "2397": {
      "op": "SUB"
    },
    "2398": {
      "offset": [
        495,
        528
      ],
      "op": "AND",
      "path": "17"
    },
    "2399": {
      "fn": "NftTrader.getTimedOffer",
      "offset": [
        495,
        528
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2400": {
      "fn": "NftTrader.getTimedOffer",
      "jump": "o",
      "offset": [
        495,
        528
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2401": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1028,
        1611
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2402": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1235,
        1245
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 23,
      "value": "0x2"
    },
    "2404": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1235,
        1245
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2405": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2407": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2409": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2411": {
      "op": "SHL"
    },
    "2412": {
      "op": "SUB"
    },
    "2413": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1235,
        1245
      ],
      "op": "AND",
      "path": "17"
    },
    "2414": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1221,
        1231
      ],
      "op": "CALLER",
      "path": "17"
    },
    "2415": {
      "branch": 45,
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1221,
        1245
      ],
      "op": "EQ",
      "path": "17"
    },
    "2416": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1213,
        1284
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x98B"
    },
    "2419": {
      "branch": 45,
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1213,
        1284
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "2420": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1213,
        1284
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2422": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1213,
        1284
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2423": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2427": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2429": {
      "op": "SHL"
    },
    "2430": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1213,
        1284
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2431": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1213,
        1284
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2432": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1213,
        1284
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "2434": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1213,
        1284
      ],
      "op": "ADD",
      "path": "17"
    },
    "2435": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1213,
        1284
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x312"
    },
    "2438": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1213,
        1284
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2439": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1213,
        1284
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xDDA"
    },
    "2442": {
      "fn": "NftTrader.addTimedOffer",
      "jump": "i",
      "offset": [
        1213,
        1284
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2443": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1213,
        1284
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2444": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1374,
        1384
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 24,
      "value": "0x2"
    },
    "2446": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1374,
        1384
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2447": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2449": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2450": {
      "op": "PUSH4",
      "value": "0x31A9108F"
    },
    "2455": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "2457": {
      "op": "SHL"
    },
    "2458": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2459": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2460": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1317,
        1329
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2461": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1317,
        1329
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2462": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2464": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2466": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2468": {
      "op": "SHL"
    },
    "2469": {
      "op": "SUB"
    },
    "2470": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1374,
        1384
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2471": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1374,
        1384
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2472": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1374,
        1384
      ],
      "op": "AND",
      "path": "17"
    },
    "2473": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1374,
        1384
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2474": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1361
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2475": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1361
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2476": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1361
      ],
      "op": "AND",
      "path": "17"
    },
    "2477": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1361
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2478": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1361
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x6352211E"
    },
    "2483": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1361
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2484": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x9C1"
    },
    "2487": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2488": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1362,
        1369
      ],
      "op": "DUP7",
      "path": "17"
    },
    "2489": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1362,
        1369
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2490": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "2492": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "ADD",
      "path": "17"
    },
    "2493": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xE8A"
    },
    "2496": {
      "fn": "NftTrader.addTimedOffer",
      "jump": "i",
      "offset": [
        1348,
        1370
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2497": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2498": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "2500": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2502": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2503": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2504": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2505": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "SUB",
      "path": "17"
    },
    "2506": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2507": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "DUP7",
      "path": "17"
    },
    "2508": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2509": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "EXTCODESIZE",
      "path": "17"
    },
    "2510": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2511": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2512": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2513": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x9D9"
    },
    "2516": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "2517": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "2519": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2520": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "REVERT",
      "path": "17"
    },
    "2521": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2522": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "POP",
      "path": "17"
    },
    "2523": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "GAS",
      "path": "17"
    },
    "2524": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "STATICCALL",
      "path": "17"
    },
    "2525": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2526": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2527": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2528": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x9ED"
    },
    "2531": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "2532": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "2533": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "2535": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2536": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "RETURNDATACOPY",
      "path": "17"
    },
    "2537": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "2538": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "2540": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "REVERT",
      "path": "17"
    },
    "2541": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2542": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "POP",
      "path": "17"
    },
    "2543": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "POP",
      "path": "17"
    },
    "2544": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "POP",
      "path": "17"
    },
    "2545": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "POP",
      "path": "17"
    },
    "2546": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2548": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2549": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "2550": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1F"
    },
    "2552": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "NOT",
      "path": "17"
    },
    "2553": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1F"
    },
    "2555": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2556": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "ADD",
      "path": "17"
    },
    "2557": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "AND",
      "path": "17"
    },
    "2558": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2559": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "ADD",
      "path": "17"
    },
    "2560": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2561": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2563": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2564": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "POP",
      "path": "17"
    },
    "2565": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2566": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "ADD",
      "path": "17"
    },
    "2567": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2568": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xA11"
    },
    "2571": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2572": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2573": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xC52"
    },
    "2576": {
      "fn": "NftTrader.addTimedOffer",
      "jump": "i",
      "offset": [
        1348,
        1370
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2577": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1370
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2578": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2580": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2582": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2584": {
      "op": "SHL"
    },
    "2585": {
      "op": "SUB"
    },
    "2586": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1384
      ],
      "op": "AND",
      "path": "17"
    },
    "2587": {
      "branch": 46,
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1348,
        1384
      ],
      "op": "EQ",
      "path": "17"
    },
    "2588": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1340,
        1417
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xA37"
    },
    "2591": {
      "branch": 46,
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1340,
        1417
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "2592": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1340,
        1417
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2594": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1340,
        1417
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2595": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2599": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2601": {
      "op": "SHL"
    },
    "2602": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1340,
        1417
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2603": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1340,
        1417
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2604": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1340,
        1417
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "2606": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1340,
        1417
      ],
      "op": "ADD",
      "path": "17"
    },
    "2607": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1340,
        1417
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x312"
    },
    "2610": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1340,
        1417
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2611": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1340,
        1417
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xE1C"
    },
    "2614": {
      "fn": "NftTrader.addTimedOffer",
      "jump": "i",
      "offset": [
        1340,
        1417
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2615": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1340,
        1417
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2616": {
      "op": "POP"
    },
    "2617": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 25,
      "value": "0x40"
    },
    "2619": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2620": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2621": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0xA0"
    },
    "2623": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2624": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "ADD",
      "path": "17"
    },
    "2625": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2626": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2627": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1489,
        1504
      ],
      "op": "TIMESTAMP",
      "path": "17"
    },
    "2628": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2629": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2630": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "2632": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2633": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2634": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "ADD",
      "path": "17"
    },
    "2635": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "SWAP8",
      "path": "17"
    },
    "2636": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "DUP9",
      "path": "17"
    },
    "2637": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2638": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2639": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2640": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "ADD",
      "path": "17"
    },
    "2641": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "SWAP7",
      "path": "17"
    },
    "2642": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "DUP8",
      "path": "17"
    },
    "2643": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2644": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x60"
    },
    "2646": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2647": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "ADD",
      "path": "17"
    },
    "2648": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "SWAP6",
      "path": "17"
    },
    "2649": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "DUP7",
      "path": "17"
    },
    "2650": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2651": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1590,
        1594
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1"
    },
    "2653": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x80"
    },
    "2655": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2656": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "ADD",
      "path": "17"
    },
    "2657": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2658": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2659": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1465,
        1604
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2660": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2662": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2664": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2666": {
      "op": "SHL"
    },
    "2667": {
      "op": "SUB"
    },
    "2668": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1453
      ],
      "op": "SWAP7",
      "path": "17"
    },
    "2669": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1453
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2670": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1453
      ],
      "op": "SWAP7",
      "path": "17"
    },
    "2671": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1453
      ],
      "op": "AND",
      "path": "17"
    },
    "2672": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2674": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1453
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2675": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1453
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2676": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1453
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2677": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1453
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2678": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1453
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2679": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1453
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2680": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1453
      ],
      "op": "DUP5",
      "path": "17"
    },
    "2681": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1453
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2682": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1453
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "2683": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1462
      ],
      "op": "SWAP6",
      "path": "17"
    },
    "2684": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1462
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2685": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1462
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2686": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1462
      ],
      "op": "SWAP5",
      "path": "17"
    },
    "2687": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1462
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2688": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1462
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2689": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1462
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2690": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1462
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2691": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1462
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2692": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1462
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2693": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1462
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "2694": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2695": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2696": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2697": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "2698": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SWAP5",
      "path": "17"
    },
    "2699": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2700": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SWAP5",
      "path": "17"
    },
    "2701": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2702": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "ADD",
      "path": "17"
    },
    "2703": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SWAP5",
      "path": "17"
    },
    "2704": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2705": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SWAP5",
      "path": "17"
    },
    "2706": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "2707": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2708": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2709": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x2"
    },
    "2711": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "DUP5",
      "path": "17"
    },
    "2712": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "ADD",
      "path": "17"
    },
    "2713": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "2714": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2715": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x3"
    },
    "2717": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2718": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "ADD",
      "path": "17"
    },
    "2719": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "2720": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2721": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "2723": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2724": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2725": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "ADD",
      "path": "17"
    },
    "2726": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2727": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2728": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2730": {
      "op": "NOT"
    },
    "2731": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "AND",
      "path": "17"
    },
    "2732": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2733": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2734": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2735": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2736": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2737": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2738": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "OR",
      "path": "17"
    },
    "2739": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2740": {
      "fn": "NftTrader.addTimedOffer",
      "offset": [
        1428,
        1604
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "2741": {
      "fn": "NftTrader.addTimedOffer",
      "jump": "o",
      "offset": [
        1028,
        1611
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2742": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2225,
        2685
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2743": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2745": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2747": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2749": {
      "op": "SHL"
    },
    "2750": {
      "op": "SUB"
    },
    "2751": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2363
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2752": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2363
      ],
      "op": "AND",
      "path": "17"
    },
    "2753": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2335
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "2755": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2363
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2756": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2363
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2757": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2363
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2758": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2363
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "2760": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2363
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2761": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2363
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2762": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2363
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2763": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2363
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2765": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2363
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2766": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2363
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2767": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2363
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "2768": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2372
      ],
      "op": "DUP5",
      "path": "17"
    },
    "2769": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2372
      ],
      "op": "DUP5",
      "path": "17"
    },
    "2770": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2372
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2771": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2372
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2772": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2372
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2773": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2372
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2774": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2372
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2775": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2372
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2776": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2338,
        2372
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "2777": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2778": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2779": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0xA0"
    },
    "2781": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2782": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "ADD",
      "path": "17"
    },
    "2783": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "DUP5",
      "path": "17"
    },
    "2784": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2785": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2786": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2787": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2788": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2789": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1"
    },
    "2791": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2792": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "ADD",
      "path": "17"
    },
    "2793": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2794": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2795": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2796": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "ADD",
      "path": "17"
    },
    "2797": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2798": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2799": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2800": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2801": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x2"
    },
    "2803": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2804": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "ADD",
      "path": "17"
    },
    "2805": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2806": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2807": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2808": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "ADD",
      "path": "17"
    },
    "2809": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2810": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2811": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2812": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2813": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x3"
    },
    "2815": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2816": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "ADD",
      "path": "17"
    },
    "2817": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2818": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x60"
    },
    "2820": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2821": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "ADD",
      "path": "17"
    },
    "2822": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2823": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "2825": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2826": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2827": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "ADD",
      "path": "17"
    },
    "2828": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2829": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0xFF"
    },
    "2831": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "AND",
      "path": "17"
    },
    "2832": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2833": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2834": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x80"
    },
    "2836": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "DUP3",
      "path": "17"
    },
    "2837": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "ADD",
      "path": "17"
    },
    "2838": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2839": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2840": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2312,
        2372
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2841": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2382,
        2421
      ],
      "op": "PUSH2",
      "path": "17",
      "statement": 26,
      "value": "0xB34"
    },
    "2844": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2382,
        2421
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "2845": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2382,
        2421
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2847": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2382,
        2421
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2848": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2852": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2854": {
      "op": "SHL"
    },
    "2855": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2382,
        2421
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2856": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2382,
        2421
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2857": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2382,
        2421
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "2859": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2382,
        2421
      ],
      "op": "ADD",
      "path": "17"
    },
    "2860": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2382,
        2421
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x312"
    },
    "2863": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2382,
        2421
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2864": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2382,
        2421
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xD83"
    },
    "2867": {
      "fn": "NftTrader.timedPurchase",
      "jump": "i",
      "offset": [
        2382,
        2421
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2868": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2382,
        2421
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2869": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2452,
        2488
      ],
      "op": "PUSH2",
      "path": "17",
      "statement": 27,
      "value": "0xB3E"
    },
    "2872": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2466,
        2478
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2873": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2480,
        2487
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2874": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2452,
        2465
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x6C6"
    },
    "2877": {
      "fn": "NftTrader.timedPurchase",
      "jump": "i",
      "offset": [
        2452,
        2488
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2878": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2452,
        2488
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2879": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2439,
        2448
      ],
      "op": "CALLVALUE",
      "path": "17"
    },
    "2880": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2439,
        2488
      ],
      "op": "LT",
      "path": "17"
    },
    "2881": {
      "branch": 47,
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2439,
        2488
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2882": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2431,
        2516
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xB5D"
    },
    "2885": {
      "branch": 47,
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2431,
        2516
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "2886": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2431,
        2516
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2888": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2431,
        2516
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2889": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2893": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2895": {
      "op": "SHL"
    },
    "2896": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2431,
        2516
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2897": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2431,
        2516
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2898": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2431,
        2516
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "2900": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2431,
        2516
      ],
      "op": "ADD",
      "path": "17"
    },
    "2901": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2431,
        2516
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0x312"
    },
    "2904": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2431,
        2516
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2905": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2431,
        2516
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xE53"
    },
    "2908": {
      "fn": "NftTrader.timedPurchase",
      "jump": "i",
      "offset": [
        2431,
        2516
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2909": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2431,
        2516
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2910": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2595,
        2605
      ],
      "op": "PUSH1",
      "path": "17",
      "statement": 28,
      "value": "0x2"
    },
    "2912": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2595,
        2605
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "2913": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2915": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2916": {
      "op": "PUSH4",
      "value": "0x21421707"
    },
    "2921": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "2923": {
      "op": "SHL"
    },
    "2924": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2925": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "2926": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2549,
        2561
      ],
      "op": "DUP5",
      "path": "17"
    },
    "2927": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2549,
        2561
      ],
      "op": "SWAP2",
      "path": "17"
    },
    "2928": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2930": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2932": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2934": {
      "op": "SHL"
    },
    "2935": {
      "op": "SUB"
    },
    "2936": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2594
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2937": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2594
      ],
      "op": "DUP5",
      "path": "17"
    },
    "2938": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2594
      ],
      "op": "AND",
      "path": "17"
    },
    "2939": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2594
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2940": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2594
      ],
      "op": "PUSH4",
      "path": "17",
      "value": "0x42842E0E"
    },
    "2945": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2594
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2946": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xB93"
    },
    "2949": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "2950": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2595,
        2605
      ],
      "op": "AND",
      "path": "17"
    },
    "2951": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2595,
        2605
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2952": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2607,
        2617
      ],
      "op": "CALLER",
      "path": "17"
    },
    "2953": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2607,
        2617
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2954": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2619,
        2626
      ],
      "op": "DUP9",
      "path": "17"
    },
    "2955": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2619,
        2626
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "2956": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "2958": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "ADD",
      "path": "17"
    },
    "2959": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xD5F"
    },
    "2962": {
      "fn": "NftTrader.timedPurchase",
      "jump": "i",
      "offset": [
        2572,
        2627
      ],
      "op": "JUMP",
      "path": "17"
    },
    "2963": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2964": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "2966": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "2968": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "MLOAD",
      "path": "17"
    },
    "2969": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2970": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "DUP4",
      "path": "17"
    },
    "2971": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "SUB",
      "path": "17"
    },
    "2972": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "DUP2",
      "path": "17"
    },
    "2973": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "2975": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "DUP8",
      "path": "17"
    },
    "2976": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2977": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "EXTCODESIZE",
      "path": "17"
    },
    "2978": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2979": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2980": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2981": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xBAD"
    },
    "2984": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "2985": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "2987": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2988": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "REVERT",
      "path": "17"
    },
    "2989": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "2990": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "POP",
      "path": "17"
    },
    "2991": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "GAS",
      "path": "17"
    },
    "2992": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "CALL",
      "path": "17"
    },
    "2993": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2994": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "DUP1",
      "path": "17"
    },
    "2995": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "ISZERO",
      "path": "17"
    },
    "2996": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "PUSH2",
      "path": "17",
      "value": "0xBC1"
    },
    "2999": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "JUMPI",
      "path": "17"
    },
    "3000": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "3001": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "3003": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "DUP1",
      "path": "17"
    },
    "3004": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "RETURNDATACOPY",
      "path": "17"
    },
    "3005": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "RETURNDATASIZE",
      "path": "17"
    },
    "3006": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "3008": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "REVERT",
      "path": "17"
    },
    "3009": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2572,
        2627
      ],
      "op": "JUMPDEST",
      "path": "17"
    },
    "3010": {
      "op": "POP"
    },
    "3011": {
      "op": "POP"
    },
    "3012": {
      "op": "POP"
    },
    "3013": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3015": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3017": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3019": {
      "op": "SHL"
    },
    "3020": {
      "op": "SUB"
    },
    "3021": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2669
      ],
      "op": "SWAP1",
      "path": "17",
      "statement": 29
    },
    "3022": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2669
      ],
      "op": "SWAP5",
      "path": "17"
    },
    "3023": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2669
      ],
      "op": "AND",
      "path": "17"
    },
    "3024": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2655
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x0"
    },
    "3026": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2669
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "3027": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2669
      ],
      "op": "DUP2",
      "path": "17"
    },
    "3028": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2669
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "3029": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2669
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x20"
    },
    "3031": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2669
      ],
      "op": "DUP2",
      "path": "17"
    },
    "3032": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2669
      ],
      "op": "DUP2",
      "path": "17"
    },
    "3033": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2669
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "3034": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2669
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x40"
    },
    "3036": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2669
      ],
      "op": "DUP1",
      "path": "17"
    },
    "3037": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2669
      ],
      "op": "DUP4",
      "path": "17"
    },
    "3038": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2669
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "3039": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2678
      ],
      "op": "SWAP6",
      "path": "17"
    },
    "3040": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2678
      ],
      "op": "DUP4",
      "path": "17"
    },
    "3041": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2678
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "3042": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2678
      ],
      "op": "SWAP5",
      "path": "17"
    },
    "3043": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2678
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "3044": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2678
      ],
      "op": "MSTORE",
      "path": "17"
    },
    "3045": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2678
      ],
      "op": "SWAP3",
      "path": "17"
    },
    "3046": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2678
      ],
      "op": "DUP4",
      "path": "17"
    },
    "3047": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2644,
        2678
      ],
      "op": "KECCAK256",
      "path": "17"
    },
    "3048": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "DUP4",
      "path": "17"
    },
    "3049": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "DUP2",
      "path": "17"
    },
    "3050": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "3051": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x1"
    },
    "3053": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "DUP2",
      "path": "17"
    },
    "3054": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "ADD",
      "path": "17"
    },
    "3055": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "DUP5",
      "path": "17"
    },
    "3056": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "3057": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "3058": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x2"
    },
    "3060": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "DUP2",
      "path": "17"
    },
    "3061": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "ADD",
      "path": "17"
    },
    "3062": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "DUP5",
      "path": "17"
    },
    "3063": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "3064": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "3065": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x3"
    },
    "3067": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "DUP2",
      "path": "17"
    },
    "3068": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "ADD",
      "path": "17"
    },
    "3069": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "3070": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "3071": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "SWAP4",
      "path": "17"
    },
    "3072": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "3073": {
      "op": "POP"
    },
    "3074": {
      "op": "POP"
    },
    "3075": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "PUSH1",
      "path": "17",
      "value": "0x4"
    },
    "3077": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "ADD",
      "path": "17"
    },
    "3078": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "DUP1",
      "path": "17"
    },
    "3079": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "SLOAD",
      "path": "17"
    },
    "3080": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3082": {
      "op": "NOT"
    },
    "3083": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "AND",
      "path": "17"
    },
    "3084": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "SWAP1",
      "path": "17"
    },
    "3085": {
      "fn": "NftTrader.timedPurchase",
      "offset": [
        2637,
        2678
      ],
      "op": "SSTORE",
      "path": "17"
    },
    "3086": {
      "op": "POP"
    },
    "3087": {
      "fn": "NftTrader.timedPurchase",
      "jump": "o",
      "offset": [
        2225,
        2685
      ],
      "op": "JUMP",
      "path": "17"
    },
    "3088": {
      "fn": "SafeMath.sub",
      "offset": [
        3108,
        3204
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "3089": {
      "fn": "SafeMath.sub",
      "offset": [
        3166,
        3173
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "3091": {
      "fn": "SafeMath.sub",
      "offset": [
        3192,
        3197
      ],
      "op": "PUSH2",
      "path": "15",
      "statement": 30,
      "value": "0xC1C"
    },
    "3094": {
      "fn": "SafeMath.sub",
      "offset": [
        3196,
        3197
      ],
      "op": "DUP3",
      "path": "15"
    },
    "3095": {
      "fn": "SafeMath.sub",
      "offset": [
        3192,
        3193
      ],
      "op": "DUP5",
      "path": "15"
    },
    "3096": {
      "fn": "SafeMath.sub",
      "offset": [
        3192,
        3197
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0xF37"
    },
    "3099": {
      "fn": "SafeMath.sub",
      "jump": "i",
      "offset": [
        3192,
        3197
      ],
      "op": "JUMP",
      "path": "15"
    },
    "3100": {
      "fn": "SafeMath.sub",
      "offset": [
        3192,
        3197
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "3101": {
      "fn": "SafeMath.sub",
      "offset": [
        3185,
        3197
      ],
      "op": "SWAP4",
      "path": "15"
    },
    "3102": {
      "fn": "SafeMath.sub",
      "offset": [
        3108,
        3204
      ],
      "op": "SWAP3",
      "path": "15"
    },
    "3103": {
      "op": "POP"
    },
    "3104": {
      "op": "POP"
    },
    "3105": {
      "op": "POP"
    },
    "3106": {
      "fn": "SafeMath.sub",
      "jump": "o",
      "offset": [
        3108,
        3204
      ],
      "op": "JUMP",
      "path": "15"
    },
    "3107": {
      "fn": "SafeMath.div",
      "offset": [
        3836,
        3932
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "3108": {
      "fn": "SafeMath.div",
      "offset": [
        3894,
        3901
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "3110": {
      "fn": "SafeMath.div",
      "offset": [
        3920,
        3925
      ],
      "op": "PUSH2",
      "path": "15",
      "statement": 31,
      "value": "0xC1C"
    },
    "3113": {
      "fn": "SafeMath.div",
      "offset": [
        3924,
        3925
      ],
      "op": "DUP3",
      "path": "15"
    },
    "3114": {
      "fn": "SafeMath.div",
      "offset": [
        3920,
        3921
      ],
      "op": "DUP5",
      "path": "15"
    },
    "3115": {
      "fn": "SafeMath.div",
      "offset": [
        3920,
        3925
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0xEF8"
    },
    "3118": {
      "fn": "SafeMath.div",
      "jump": "i",
      "offset": [
        3920,
        3925
      ],
      "op": "JUMP",
      "path": "15"
    },
    "3119": {
      "fn": "SafeMath.mul",
      "offset": [
        3451,
        3547
      ],
      "op": "JUMPDEST",
      "path": "15"
    },
    "3120": {
      "fn": "SafeMath.mul",
      "offset": [
        3509,
        3516
      ],
      "op": "PUSH1",
      "path": "15",
      "value": "0x0"
    },
    "3122": {
      "fn": "SafeMath.mul",
      "offset": [
        3535,
        3540
      ],
      "op": "PUSH2",
      "path": "15",
      "statement": 32,
      "value": "0xC1C"
    },
    "3125": {
      "fn": "SafeMath.mul",
      "offset": [
        3539,
        3540
      ],
      "op": "DUP3",
      "path": "15"
    },
    "3126": {
      "fn": "SafeMath.mul",
      "offset": [
        3535,
        3536
      ],
      "op": "DUP5",
      "path": "15"
    },
    "3127": {
      "fn": "SafeMath.mul",
      "offset": [
        3535,
        3540
      ],
      "op": "PUSH2",
      "path": "15",
      "value": "0xF18"
    },
    "3130": {
      "fn": "SafeMath.mul",
      "jump": "i",
      "offset": [
        3535,
        3540
      ],
      "op": "JUMP",
      "path": "15"
    },
    "3131": {
      "fn": "Math.max",
      "offset": [
        270,
        375
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3132": {
      "fn": "Math.max",
      "offset": [
        328,
        335
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "3134": {
      "fn": "Math.max",
      "offset": [
        359,
        360
      ],
      "op": "DUP2",
      "path": "14",
      "statement": 33
    },
    "3135": {
      "fn": "Math.max",
      "offset": [
        354,
        355
      ],
      "op": "DUP4",
      "path": "14"
    },
    "3136": {
      "fn": "Math.max",
      "offset": [
        354,
        360
      ],
      "op": "LT",
      "path": "14"
    },
    "3137": {
      "branch": 48,
      "fn": "Math.max",
      "offset": [
        354,
        360
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "3138": {
      "fn": "Math.max",
      "offset": [
        354,
        368
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xC4B"
    },
    "3141": {
      "branch": 48,
      "fn": "Math.max",
      "offset": [
        354,
        368
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "3142": {
      "fn": "Math.max",
      "offset": [
        367,
        368
      ],
      "op": "DUP2",
      "path": "14"
    },
    "3143": {
      "fn": "Math.max",
      "offset": [
        354,
        368
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0xC1C"
    },
    "3146": {
      "fn": "Math.max",
      "offset": [
        354,
        368
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3147": {
      "fn": "Math.max",
      "offset": [
        354,
        368
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "3148": {
      "op": "POP"
    },
    "3149": {
      "fn": "Math.max",
      "offset": [
        363,
        364
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3150": {
      "fn": "Math.max",
      "offset": [
        363,
        364
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "3151": {
      "fn": "Math.max",
      "offset": [
        270,
        375
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "3152": {
      "op": "POP"
    },
    "3153": {
      "fn": "Math.max",
      "jump": "o",
      "offset": [
        270,
        375
      ],
      "op": "JUMP",
      "path": "14"
    },
    "3154": {
      "op": "JUMPDEST"
    },
    "3155": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3157": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3159": {
      "op": "DUP3"
    },
    "3160": {
      "op": "DUP5"
    },
    "3161": {
      "op": "SUB"
    },
    "3162": {
      "op": "SLT"
    },
    "3163": {
      "op": "ISZERO"
    },
    "3164": {
      "op": "PUSH2",
      "value": "0xC63"
    },
    "3167": {
      "op": "JUMPI"
    },
    "3168": {
      "op": "DUP1"
    },
    "3169": {
      "op": "DUP2"
    },
    "3170": {
      "op": "REVERT"
    },
    "3171": {
      "op": "JUMPDEST"
    },
    "3172": {
      "op": "DUP2"
    },
    "3173": {
      "op": "MLOAD"
    },
    "3174": {
      "op": "PUSH2",
      "value": "0xC1C"
    },
    "3177": {
      "op": "DUP2"
    },
    "3178": {
      "op": "PUSH2",
      "value": "0xF64"
    },
    "3181": {
      "jump": "i",
      "op": "JUMP"
    },
    "3182": {
      "op": "JUMPDEST"
    },
    "3183": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3185": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3187": {
      "op": "DUP3"
    },
    "3188": {
      "op": "DUP5"
    },
    "3189": {
      "op": "SUB"
    },
    "3190": {
      "op": "SLT"
    },
    "3191": {
      "op": "ISZERO"
    },
    "3192": {
      "op": "PUSH2",
      "value": "0xC7F"
    },
    "3195": {
      "op": "JUMPI"
    },
    "3196": {
      "op": "DUP1"
    },
    "3197": {
      "op": "DUP2"
    },
    "3198": {
      "op": "REVERT"
    },
    "3199": {
      "op": "JUMPDEST"
    },
    "3200": {
      "op": "DUP2"
    },
    "3201": {
      "op": "CALLDATALOAD"
    },
    "3202": {
      "op": "PUSH2",
      "value": "0xC1C"
    },
    "3205": {
      "op": "DUP2"
    },
    "3206": {
      "op": "PUSH2",
      "value": "0xF64"
    },
    "3209": {
      "jump": "i",
      "op": "JUMP"
    },
    "3210": {
      "op": "JUMPDEST"
    },
    "3211": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3213": {
      "op": "DUP1"
    },
    "3214": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3216": {
      "op": "DUP4"
    },
    "3217": {
      "op": "DUP6"
    },
    "3218": {
      "op": "SUB"
    },
    "3219": {
      "op": "SLT"
    },
    "3220": {
      "op": "ISZERO"
    },
    "3221": {
      "op": "PUSH2",
      "value": "0xC9C"
    },
    "3224": {
      "op": "JUMPI"
    },
    "3225": {
      "op": "DUP1"
    },
    "3226": {
      "op": "DUP2"
    },
    "3227": {
      "op": "REVERT"
    },
    "3228": {
      "op": "JUMPDEST"
    },
    "3229": {
      "op": "DUP3"
    },
    "3230": {
      "op": "CALLDATALOAD"
    },
    "3231": {
      "op": "PUSH2",
      "value": "0xCA7"
    },
    "3234": {
      "op": "DUP2"
    },
    "3235": {
      "op": "PUSH2",
      "value": "0xF64"
    },
    "3238": {
      "jump": "i",
      "op": "JUMP"
    },
    "3239": {
      "op": "JUMPDEST"
    },
    "3240": {
      "op": "SWAP5"
    },
    "3241": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3243": {
      "op": "SWAP4"
    },
    "3244": {
      "op": "SWAP1"
    },
    "3245": {
      "op": "SWAP4"
    },
    "3246": {
      "op": "ADD"
    },
    "3247": {
      "op": "CALLDATALOAD"
    },
    "3248": {
      "op": "SWAP4"
    },
    "3249": {
      "op": "POP"
    },
    "3250": {
      "op": "POP"
    },
    "3251": {
      "op": "POP"
    },
    "3252": {
      "jump": "o",
      "op": "JUMP"
    },
    "3253": {
      "op": "JUMPDEST"
    },
    "3254": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3256": {
      "op": "DUP1"
    },
    "3257": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3259": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3261": {
      "op": "DUP5"
    },
    "3262": {
      "op": "DUP7"
    },
    "3263": {
      "op": "SUB"
    },
    "3264": {
      "op": "SLT"
    },
    "3265": {
      "op": "ISZERO"
    },
    "3266": {
      "op": "PUSH2",
      "value": "0xCC9"
    },
    "3269": {
      "op": "JUMPI"
    },
    "3270": {
      "op": "DUP1"
    },
    "3271": {
      "op": "DUP2"
    },
    "3272": {
      "op": "REVERT"
    },
    "3273": {
      "op": "JUMPDEST"
    },
    "3274": {
      "op": "DUP4"
    },
    "3275": {
      "op": "CALLDATALOAD"
    },
    "3276": {
      "op": "SWAP3"
    },
    "3277": {
      "op": "POP"
    },
    "3278": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3280": {
      "op": "DUP5"
    },
    "3281": {
      "op": "ADD"
    },
    "3282": {
      "op": "CALLDATALOAD"
    },
    "3283": {
      "op": "PUSH2",
      "value": "0xCDB"
    },
    "3286": {
      "op": "DUP2"
    },
    "3287": {
      "op": "PUSH2",
      "value": "0xF64"
    },
    "3290": {
      "jump": "i",
      "op": "JUMP"
    },
    "3291": {
      "op": "JUMPDEST"
    },
    "3292": {
      "op": "SWAP3"
    },
    "3293": {
      "op": "SWAP6"
    },
    "3294": {
      "op": "SWAP3"
    },
    "3295": {
      "op": "SWAP5"
    },
    "3296": {
      "op": "POP"
    },
    "3297": {
      "op": "POP"
    },
    "3298": {
      "op": "POP"
    },
    "3299": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3301": {
      "op": "SWAP2"
    },
    "3302": {
      "op": "SWAP1"
    },
    "3303": {
      "op": "SWAP2"
    },
    "3304": {
      "op": "ADD"
    },
    "3305": {
      "op": "CALLDATALOAD"
    },
    "3306": {
      "op": "SWAP1"
    },
    "3307": {
      "jump": "o",
      "op": "JUMP"
    },
    "3308": {
      "op": "JUMPDEST"
    },
    "3309": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3311": {
      "op": "DUP1"
    },
    "3312": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3314": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3316": {
      "op": "DUP5"
    },
    "3317": {
      "op": "DUP7"
    },
    "3318": {
      "op": "SUB"
    },
    "3319": {
      "op": "SLT"
    },
    "3320": {
      "op": "ISZERO"
    },
    "3321": {
      "op": "PUSH2",
      "value": "0xCC9"
    },
    "3324": {
      "op": "JUMPI"
    },
    "3325": {
      "op": "DUP3"
    },
    "3326": {
      "op": "DUP4"
    },
    "3327": {
      "op": "REVERT"
    },
    "3328": {
      "op": "JUMPDEST"
    },
    "3329": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3331": {
      "op": "DUP1"
    },
    "3332": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3334": {
      "op": "DUP1"
    },
    "3335": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3337": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3339": {
      "op": "DUP7"
    },
    "3340": {
      "op": "DUP9"
    },
    "3341": {
      "op": "SUB"
    },
    "3342": {
      "op": "SLT"
    },
    "3343": {
      "op": "ISZERO"
    },
    "3344": {
      "op": "PUSH2",
      "value": "0xD17"
    },
    "3347": {
      "op": "JUMPI"
    },
    "3348": {
      "op": "DUP1"
    },
    "3349": {
      "op": "DUP2"
    },
    "3350": {
      "op": "REVERT"
    },
    "3351": {
      "op": "JUMPDEST"
    },
    "3352": {
      "op": "DUP6"
    },
    "3353": {
      "op": "CALLDATALOAD"
    },
    "3354": {
      "op": "SWAP5"
    },
    "3355": {
      "op": "POP"
    },
    "3356": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3358": {
      "op": "DUP7"
    },
    "3359": {
      "op": "ADD"
    },
    "3360": {
      "op": "CALLDATALOAD"
    },
    "3361": {
      "op": "SWAP4"
    },
    "3362": {
      "op": "POP"
    },
    "3363": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3365": {
      "op": "DUP7"
    },
    "3366": {
      "op": "ADD"
    },
    "3367": {
      "op": "CALLDATALOAD"
    },
    "3368": {
      "op": "SWAP3"
    },
    "3369": {
      "op": "POP"
    },
    "3370": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3372": {
      "op": "DUP7"
    },
    "3373": {
      "op": "ADD"
    },
    "3374": {
      "op": "CALLDATALOAD"
    },
    "3375": {
      "op": "PUSH2",
      "value": "0xD37"
    },
    "3378": {
      "op": "DUP2"
    },
    "3379": {
      "op": "PUSH2",
      "value": "0xF64"
    },
    "3382": {
      "jump": "i",
      "op": "JUMP"
    },
    "3383": {
      "op": "JUMPDEST"
    },
    "3384": {
      "op": "SWAP5"
    },
    "3385": {
      "op": "SWAP8"
    },
    "3386": {
      "op": "SWAP4"
    },
    "3387": {
      "op": "SWAP7"
    },
    "3388": {
      "op": "POP"
    },
    "3389": {
      "op": "SWAP2"
    },
    "3390": {
      "op": "SWAP5"
    },
    "3391": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3393": {
      "op": "ADD"
    },
    "3394": {
      "op": "CALLDATALOAD"
    },
    "3395": {
      "op": "SWAP3"
    },
    "3396": {
      "op": "SWAP2"
    },
    "3397": {
      "op": "POP"
    },
    "3398": {
      "op": "POP"
    },
    "3399": {
      "jump": "o",
      "op": "JUMP"
    },
    "3400": {
      "op": "JUMPDEST"
    },
    "3401": {
      "op": "SWAP1"
    },
    "3402": {
      "jump": "o",
      "op": "JUMP"
    },
    "3403": {
      "op": "JUMPDEST"
    },
    "3404": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3406": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3408": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3410": {
      "op": "SHL"
    },
    "3411": {
      "op": "SUB"
    },
    "3412": {
      "op": "SWAP2"
    },
    "3413": {
      "op": "SWAP1"
    },
    "3414": {
      "op": "SWAP2"
    },
    "3415": {
      "op": "AND"
    },
    "3416": {
      "op": "DUP2"
    },
    "3417": {
      "op": "MSTORE"
    },
    "3418": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3420": {
      "op": "ADD"
    },
    "3421": {
      "op": "SWAP1"
    },
    "3422": {
      "jump": "o",
      "op": "JUMP"
    },
    "3423": {
      "op": "JUMPDEST"
    },
    "3424": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3426": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3428": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3430": {
      "op": "SHL"
    },
    "3431": {
      "op": "SUB"
    },
    "3432": {
      "op": "SWAP4"
    },
    "3433": {
      "op": "DUP5"
    },
    "3434": {
      "op": "AND"
    },
    "3435": {
      "op": "DUP2"
    },
    "3436": {
      "op": "MSTORE"
    },
    "3437": {
      "op": "SWAP2"
    },
    "3438": {
      "op": "SWAP1"
    },
    "3439": {
      "op": "SWAP3"
    },
    "3440": {
      "op": "AND"
    },
    "3441": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3443": {
      "op": "DUP3"
    },
    "3444": {
      "op": "ADD"
    },
    "3445": {
      "op": "MSTORE"
    },
    "3446": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3448": {
      "op": "DUP2"
    },
    "3449": {
      "op": "ADD"
    },
    "3450": {
      "op": "SWAP2"
    },
    "3451": {
      "op": "SWAP1"
    },
    "3452": {
      "op": "SWAP2"
    },
    "3453": {
      "op": "MSTORE"
    },
    "3454": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3456": {
      "op": "ADD"
    },
    "3457": {
      "op": "SWAP1"
    },
    "3458": {
      "jump": "o",
      "op": "JUMP"
    },
    "3459": {
      "op": "JUMPDEST"
    },
    "3460": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3462": {
      "op": "DUP1"
    },
    "3463": {
      "op": "DUP3"
    },
    "3464": {
      "op": "MSTORE"
    },
    "3465": {
      "op": "PUSH1",
      "value": "0xF"
    },
    "3467": {
      "op": "SWAP1"
    },
    "3468": {
      "op": "DUP3"
    },
    "3469": {
      "op": "ADD"
    },
    "3470": {
      "op": "MSTORE"
    },
    "3471": {
      "op": "PUSH15",
      "value": "0x13D999995C881B9BDD08199BDD5B99"
    },
    "3487": {
      "op": "PUSH1",
      "value": "0x8A"
    },
    "3489": {
      "op": "SHL"
    },
    "3490": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3492": {
      "op": "DUP3"
    },
    "3493": {
      "op": "ADD"
    },
    "3494": {
      "op": "MSTORE"
    },
    "3495": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3497": {
      "op": "ADD"
    },
    "3498": {
      "op": "SWAP1"
    },
    "3499": {
      "jump": "o",
      "op": "JUMP"
    },
    "3500": {
      "op": "JUMPDEST"
    },
    "3501": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3503": {
      "op": "DUP1"
    },
    "3504": {
      "op": "DUP3"
    },
    "3505": {
      "op": "MSTORE"
    },
    "3506": {
      "op": "PUSH1",
      "value": "0x14"
    },
    "3508": {
      "op": "SWAP1"
    },
    "3509": {
      "op": "DUP3"
    },
    "3510": {
      "op": "ADD"
    },
    "3511": {
      "op": "MSTORE"
    },
    "3512": {
      "op": "PUSH20",
      "value": "0x2330B4B632B2103A379039B2B7321022BA3432B9"
    },
    "3533": {
      "op": "PUSH1",
      "value": "0x61"
    },
    "3535": {
      "op": "SHL"
    },
    "3536": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3538": {
      "op": "DUP3"
    },
    "3539": {
      "op": "ADD"
    },
    "3540": {
      "op": "MSTORE"
    },
    "3541": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3543": {
      "op": "ADD"
    },
    "3544": {
      "op": "SWAP1"
    },
    "3545": {
      "jump": "o",
      "op": "JUMP"
    },
    "3546": {
      "op": "JUMPDEST"
    },
    "3547": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3549": {
      "op": "DUP1"
    },
    "3550": {
      "op": "DUP3"
    },
    "3551": {
      "op": "MSTORE"
    },
    "3552": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "3554": {
      "op": "SWAP1"
    },
    "3555": {
      "op": "DUP3"
    },
    "3556": {
      "op": "ADD"
    },
    "3557": {
      "op": "MSTORE"
    },
    "3558": {
      "op": "PUSH32",
      "value": "0x4973206E6F74206F776E6572206F662074686520747261646520636F6E747261"
    },
    "3591": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3593": {
      "op": "DUP3"
    },
    "3594": {
      "op": "ADD"
    },
    "3595": {
      "op": "MSTORE"
    },
    "3596": {
      "op": "PUSH2",
      "value": "0x18DD"
    },
    "3599": {
      "op": "PUSH1",
      "value": "0xF2"
    },
    "3601": {
      "op": "SHL"
    },
    "3602": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3604": {
      "op": "DUP3"
    },
    "3605": {
      "op": "ADD"
    },
    "3606": {
      "op": "MSTORE"
    },
    "3607": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3609": {
      "op": "ADD"
    },
    "3610": {
      "op": "SWAP1"
    },
    "3611": {
      "jump": "o",
      "op": "JUMP"
    },
    "3612": {
      "op": "JUMPDEST"
    },
    "3613": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3615": {
      "op": "DUP1"
    },
    "3616": {
      "op": "DUP3"
    },
    "3617": {
      "op": "MSTORE"
    },
    "3618": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "3620": {
      "op": "SWAP1"
    },
    "3621": {
      "op": "DUP3"
    },
    "3622": {
      "op": "ADD"
    },
    "3623": {
      "op": "MSTORE"
    },
    "3624": {
      "op": "PUSH32",
      "value": "0x4973206E6F74206F776E6572206F662045524337323120746F6B656E00000000"
    },
    "3657": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3659": {
      "op": "DUP3"
    },
    "3660": {
      "op": "ADD"
    },
    "3661": {
      "op": "MSTORE"
    },
    "3662": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3664": {
      "op": "ADD"
    },
    "3665": {
      "op": "SWAP1"
    },
    "3666": {
      "jump": "o",
      "op": "JUMP"
    },
    "3667": {
      "op": "JUMPDEST"
    },
    "3668": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3670": {
      "op": "DUP1"
    },
    "3671": {
      "op": "DUP3"
    },
    "3672": {
      "op": "MSTORE"
    },
    "3673": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "3675": {
      "op": "SWAP1"
    },
    "3676": {
      "op": "DUP3"
    },
    "3677": {
      "op": "ADD"
    },
    "3678": {
      "op": "MSTORE"
    },
    "3679": {
      "op": "PUSH32",
      "value": "0x496E73756666696369656E742066756E64732073656E74000000000000000000"
    },
    "3712": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3714": {
      "op": "DUP3"
    },
    "3715": {
      "op": "ADD"
    },
    "3716": {
      "op": "MSTORE"
    },
    "3717": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3719": {
      "op": "ADD"
    },
    "3720": {
      "op": "SWAP1"
    },
    "3721": {
      "jump": "o",
      "op": "JUMP"
    },
    "3722": {
      "op": "JUMPDEST"
    },
    "3723": {
      "op": "SWAP1"
    },
    "3724": {
      "op": "DUP2"
    },
    "3725": {
      "op": "MSTORE"
    },
    "3726": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3728": {
      "op": "ADD"
    },
    "3729": {
      "op": "SWAP1"
    },
    "3730": {
      "jump": "o",
      "op": "JUMP"
    },
    "3731": {
      "op": "JUMPDEST"
    },
    "3732": {
      "op": "SWAP2"
    },
    "3733": {
      "op": "DUP3"
    },
    "3734": {
      "op": "MSTORE"
    },
    "3735": {
      "op": "ISZERO"
    },
    "3736": {
      "op": "ISZERO"
    },
    "3737": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3739": {
      "op": "DUP3"
    },
    "3740": {
      "op": "ADD"
    },
    "3741": {
      "op": "MSTORE"
    },
    "3742": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3744": {
      "op": "ADD"
    },
    "3745": {
      "op": "SWAP1"
    },
    "3746": {
      "jump": "o",
      "op": "JUMP"
    },
    "3747": {
      "op": "JUMPDEST"
    },
    "3748": {
      "op": "SWAP3"
    },
    "3749": {
      "op": "DUP4"
    },
    "3750": {
      "op": "MSTORE"
    },
    "3751": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3753": {
      "op": "DUP4"
    },
    "3754": {
      "op": "ADD"
    },
    "3755": {
      "op": "SWAP2"
    },
    "3756": {
      "op": "SWAP1"
    },
    "3757": {
      "op": "SWAP2"
    },
    "3758": {
      "op": "MSTORE"
    },
    "3759": {
      "op": "ISZERO"
    },
    "3760": {
      "op": "ISZERO"
    },
    "3761": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3763": {
      "op": "DUP3"
    },
    "3764": {
      "op": "ADD"
    },
    "3765": {
      "op": "MSTORE"
    },
    "3766": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3768": {
      "op": "ADD"
    },
    "3769": {
      "op": "SWAP1"
    },
    "3770": {
      "jump": "o",
      "op": "JUMP"
    },
    "3771": {
      "op": "JUMPDEST"
    },
    "3772": {
      "op": "SWAP5"
    },
    "3773": {
      "op": "DUP6"
    },
    "3774": {
      "op": "MSTORE"
    },
    "3775": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3777": {
      "op": "DUP6"
    },
    "3778": {
      "op": "ADD"
    },
    "3779": {
      "op": "SWAP4"
    },
    "3780": {
      "op": "SWAP1"
    },
    "3781": {
      "op": "SWAP4"
    },
    "3782": {
      "op": "MSTORE"
    },
    "3783": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3785": {
      "op": "DUP5"
    },
    "3786": {
      "op": "ADD"
    },
    "3787": {
      "op": "SWAP2"
    },
    "3788": {
      "op": "SWAP1"
    },
    "3789": {
      "op": "SWAP2"
    },
    "3790": {
      "op": "MSTORE"
    },
    "3791": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3793": {
      "op": "DUP4"
    },
    "3794": {
      "op": "ADD"
    },
    "3795": {
      "op": "MSTORE"
    },
    "3796": {
      "op": "ISZERO"
    },
    "3797": {
      "op": "ISZERO"
    },
    "3798": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3800": {
      "op": "DUP3"
    },
    "3801": {
      "op": "ADD"
    },
    "3802": {
      "op": "MSTORE"
    },
    "3803": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3805": {
      "op": "ADD"
    },
    "3806": {
      "op": "SWAP1"
    },
    "3807": {
      "jump": "o",
      "op": "JUMP"
    },
    "3808": {
      "op": "JUMPDEST"
    },
    "3809": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3811": {
      "op": "DUP3"
    },
    "3812": {
      "op": "NOT"
    },
    "3813": {
      "op": "DUP3"
    },
    "3814": {
      "op": "GT"
    },
    "3815": {
      "op": "ISZERO"
    },
    "3816": {
      "op": "PUSH2",
      "value": "0xEF3"
    },
    "3819": {
      "op": "JUMPI"
    },
    "3820": {
      "op": "PUSH2",
      "value": "0xEF3"
    },
    "3823": {
      "op": "PUSH2",
      "value": "0xF4E"
    },
    "3826": {
      "jump": "i",
      "op": "JUMP"
    },
    "3827": {
      "op": "JUMPDEST"
    },
    "3828": {
      "op": "POP"
    },
    "3829": {
      "op": "ADD"
    },
    "3830": {
      "op": "SWAP1"
    },
    "3831": {
      "jump": "o",
      "op": "JUMP"
    },
    "3832": {
      "op": "JUMPDEST"
    },
    "3833": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3835": {
      "op": "DUP3"
    },
    "3836": {
      "op": "PUSH2",
      "value": "0xF13"
    },
    "3839": {
      "op": "JUMPI"
    },
    "3840": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3845": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3847": {
      "op": "SHL"
    },
    "3848": {
      "op": "DUP2"
    },
    "3849": {
      "op": "MSTORE"
    },
    "3850": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "3852": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3854": {
      "op": "MSTORE"
    },
    "3855": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3857": {
      "op": "DUP2"
    },
    "3858": {
      "op": "REVERT"
    },
    "3859": {
      "op": "JUMPDEST"
    },
    "3860": {
      "op": "POP"
    },
    "3861": {
      "op": "DIV"
    },
    "3862": {
      "op": "SWAP1"
    },
    "3863": {
      "jump": "o",
      "op": "JUMP"
    },
    "3864": {
      "op": "JUMPDEST"
    },
    "3865": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3867": {
      "op": "DUP2"
    },
    "3868": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3870": {
      "op": "NOT"
    },
    "3871": {
      "op": "DIV"
    },
    "3872": {
      "op": "DUP4"
    },
    "3873": {
      "op": "GT"
    },
    "3874": {
      "op": "DUP3"
    },
    "3875": {
      "op": "ISZERO"
    },
    "3876": {
      "op": "ISZERO"
    },
    "3877": {
      "op": "AND"
    },
    "3878": {
      "op": "ISZERO"
    },
    "3879": {
      "op": "PUSH2",
      "value": "0xF32"
    },
    "3882": {
      "op": "JUMPI"
    },
    "3883": {
      "op": "PUSH2",
      "value": "0xF32"
    },
    "3886": {
      "op": "PUSH2",
      "value": "0xF4E"
    },
    "3889": {
      "jump": "i",
      "op": "JUMP"
    },
    "3890": {
      "op": "JUMPDEST"
    },
    "3891": {
      "op": "POP"
    },
    "3892": {
      "op": "MUL"
    },
    "3893": {
      "op": "SWAP1"
    },
    "3894": {
      "jump": "o",
      "op": "JUMP"
    },
    "3895": {
      "op": "JUMPDEST"
    },
    "3896": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3898": {
      "op": "DUP3"
    },
    "3899": {
      "op": "DUP3"
    },
    "3900": {
      "op": "LT"
    },
    "3901": {
      "op": "ISZERO"
    },
    "3902": {
      "op": "PUSH2",
      "value": "0xF49"
    },
    "3905": {
      "op": "JUMPI"
    },
    "3906": {
      "op": "PUSH2",
      "value": "0xF49"
    },
    "3909": {
      "op": "PUSH2",
      "value": "0xF4E"
    },
    "3912": {
      "jump": "i",
      "op": "JUMP"
    },
    "3913": {
      "op": "JUMPDEST"
    },
    "3914": {
      "op": "POP"
    },
    "3915": {
      "op": "SUB"
    },
    "3916": {
      "op": "SWAP1"
    },
    "3917": {
      "jump": "o",
      "op": "JUMP"
    },
    "3918": {
      "op": "JUMPDEST"
    },
    "3919": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3924": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3926": {
      "op": "SHL"
    },
    "3927": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3929": {
      "op": "MSTORE"
    },
    "3930": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "3932": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3934": {
      "op": "MSTORE"
    },
    "3935": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3937": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3939": {
      "op": "REVERT"
    },
    "3940": {
      "op": "JUMPDEST"
    },
    "3941": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3943": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3945": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3947": {
      "op": "SHL"
    },
    "3948": {
      "op": "SUB"
    },
    "3949": {
      "op": "DUP2"
    },
    "3950": {
      "op": "AND"
    },
    "3951": {
      "op": "DUP2"
    },
    "3952": {
      "op": "EQ"
    },
    "3953": {
      "op": "PUSH2",
      "value": "0xF79"
    },
    "3956": {
      "op": "JUMPI"
    },
    "3957": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3959": {
      "op": "DUP1"
    },
    "3960": {
      "op": "REVERT"
    },
    "3961": {
      "op": "JUMPDEST"
    },
    "3962": {
      "op": "POP"
    },
    "3963": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "2e2207f20548ba8ad7ea98491e7b78c66320950a",
  "source": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\ncontract NftTrader {\n    // Address of ERC721 contract owned by Galaxy => (tokenId => offer details)\n    mapping(address => mapping(uint256 => TimedOffer)) public timedOffers;\n    mapping(address => mapping(uint256 => ConstantOffer)) public constantOffers;\n    address payable public tradeOwner;\n\n    struct TimedOffer {\n        uint256 createdAt;\n        uint256 dayPriceChange;\n        uint256 minPrice;\n        uint256 maxPrice;\n        bool isSet;\n    }\n\n    struct ConstantOffer {\n        uint256 price;\n        bool isSet;\n    }\n\n    constructor () payable {\n        tradeOwner = payable(msg.sender);\n    }\n\n    function setOwner(address payable newOwner) public {\n        require(msg.sender == tradeOwner, \"Is not owner of the trade contract\");\n        tradeOwner = newOwner;\n    }\n\n    function addTimedOffer(\n        uint256 dayPriceChange,\n        uint256 minPrice,\n        uint256 maxPrice,\n        address contractAddr,\n        uint256 tokenId\n    ) public {\n        require(msg.sender == tradeOwner, \"Is not owner of the trade contract\");\n\n        ERC721 token = ERC721(contractAddr);\n        require(token.ownerOf(tokenId) == tradeOwner, \"Is not owner of ERC721 token\");\n\n        timedOffers[contractAddr][tokenId] = TimedOffer(\n            block.timestamp,\n            dayPriceChange,\n            minPrice,\n            maxPrice,\n            true\n        );\n    }\n\n    function offsetTimedOffer(\n        int256 offsetSeconds,\n        address contractAddr,\n        uint256 tokenId\n    ) public {\n        require(msg.sender == tradeOwner, \"Is not owner of the trade contract\");\n\n        TimedOffer storage offer = timedOffers[contractAddr][tokenId];\n        require(offer.isSet, \"Offer not found\");\n\n        offer.createdAt += uint256(offsetSeconds);\n    }\n\n    function deleteTimedOffer(address contractAddr, uint256 tokenId) public {\n        require(msg.sender == tradeOwner, \"Is not owner of the trade contract\");\n        delete timedOffers[contractAddr][tokenId];\n    }\n\n    function timedPurchase(address contractAddr, uint256 tokenId) public payable {\n        TimedOffer memory offer = timedOffers[contractAddr][tokenId];\n        require(offer.isSet, \"Offer not found\");\n        require(msg.value >= getTimedPrice(contractAddr, tokenId), \"Insufficient funds sent\");\n\n        ERC721 token = ERC721(contractAddr);\n        token.safeTransferFrom(tradeOwner, msg.sender, tokenId);\n        delete timedOffers[contractAddr][tokenId];\n    }\n\n    function getTimedPrice(address contractAddr, uint256 tokenId) public view returns (\n        uint256 currentPrice\n    ){\n        TimedOffer memory offer = timedOffers[contractAddr][tokenId];\n        if (offer.isSet) {\n            uint256 daysPassed = SafeMath.div(\n                SafeMath.sub(block.timestamp, offer.createdAt), 3600 * 24\n            );\n            uint256 calculatedPrice = SafeMath.sub(\n                offer.maxPrice, SafeMath.mul(daysPassed, offer.dayPriceChange)\n            );\n            currentPrice = Math.max(offer.minPrice, calculatedPrice);\n        }\n        else {\n            currentPrice = 0;\n        }\n    }\n\n    function getTimedOffer(address contractAddr, uint256 tokenId) public view returns (\n        uint256 minPrice,\n        uint256 currentPrice,\n        bool isSet\n    ) {\n        TimedOffer memory offer = timedOffers[contractAddr][tokenId];\n        minPrice = offer.minPrice;\n        isSet = offer.isSet;\n        currentPrice = getTimedPrice(contractAddr, tokenId);\n    }\n\n    function addConstantOffer(\n        uint256 price,\n        address contractAddr,\n        uint256 tokenId\n    ) public {\n        require(msg.sender == tradeOwner, \"Is not owner of the trade contract\");\n\n        ERC721 token = ERC721(contractAddr);\n        require(token.ownerOf(tokenId) == tradeOwner, \"Is not owner of ERC721 token\");\n\n        constantOffers[contractAddr][tokenId] = ConstantOffer(price, true);\n    }\n\n    function deleteConstantOffer(address contractAddr, uint256 tokenId) public {\n        require(msg.sender == tradeOwner, \"Is not owner of the trade contract\");\n        delete constantOffers[contractAddr][tokenId];\n    }\n\n    function constantPurchase(address contractAddr, uint256 tokenId) public payable {\n        ConstantOffer memory offer = constantOffers[contractAddr][tokenId];\n        require(offer.isSet, \"Offer not found\");\n        require(msg.value >= offer.price, \"Insufficient funds sent\");\n\n        ERC721 token = ERC721(contractAddr);\n        token.safeTransferFrom(tradeOwner, msg.sender, tokenId);\n        delete constantOffers[contractAddr][tokenId];\n    }\n\n    function withdraw() public {\n        require(msg.sender == tradeOwner, \"Is not owner of the trade contract\");\n        uint256 amount = address(this).balance;\n        (bool success,) = tradeOwner.call{value : amount}(\"\");\n        require(success, \"Failed to send Ether\");\n    }\n\n    function getBalance() public view returns (uint256 balance){\n        require(msg.sender == tradeOwner, \"Is not owner of the trade contract\");\n        balance = address(this).balance;\n    }\n}\n",
  "sourceMap": "234:5044:17:-:0;;;807:10;:32;;-1:-1:-1;;;;;;807:32:17;828:10;807:32;;;234:5044;;;;;;",
  "sourcePath": "contracts/NftTrader.sol",
  "type": "contract"
}